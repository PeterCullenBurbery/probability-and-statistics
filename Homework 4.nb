(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1026222,      19641]
NotebookOptionsPosition[   1009883,      19351]
NotebookOutlinePosition[   1010436,      19370]
CellTagsIndexPosition[   1010393,      19367]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Homework 4",
 FontFamily->"JetBrains Mono",
 FontWeight->"Normal",
 FontTracking->"Plain"]], "Title",
 CellFrame->{{0, 0}, {0, 0.5}},
 CellChangeTimes->{{3.8795209621051903`*^9, 3.8795209642031813`*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"62755929-4da7-482b-9330-8516dfaa38a1"],

Cell["STA 445 Probability and Statistics I", "Subtitle",
 CellChangeTimes->{{3.8795209671431804`*^9, 3.879520974691204*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"2a3ab592-b967-4df7-9825-f04a61b45b45"],

Cell["Fall 2022", "Subsubtitle",
 CellChangeTimes->{{3.879520977664197*^9, 3.8795209790961876`*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"47d5bdab-6696-4d95-a2ec-63dcca8629f0"],

Cell["Peter Cullen Burbery", "Author",
 CellChangeTimes->{{3.8795209825021954`*^9, 3.879520985387184*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"a7fe6df5-960c-4066-adde-d15e9aabfc28"],

Cell["Marshall University statistics and mathematics department", "Department",
 CellChangeTimes->{{3.8795209888921967`*^9, 3.879520999485197*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"527e845f-4dde-46d1-82be-52b41743ff78"],

Cell["Thursday 8 December 2022", "Date",
 CellChangeTimes->{{3.879521003089182*^9, 3.879521010936191*^9}},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"0c27d0b6-598a-4beb-a4cd-fa0fe4e1d989"],

Cell[CellGroupData[{

Cell["Enter section title here", "Section",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"333d57a6-c12c-4740-be05-a8a91db541ae"],

Cell[CellGroupData[{

Cell["Enter subsection title here", "Subsection",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"444b1c9d-da6c-4c87-b09f-e9dc55219892"],

Cell[CellGroupData[{

Cell["Enter subsubsection title here", "Subsubsection",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"a6f4e6b3-5b1c-4162-a9f7-2e5c874a2626"],

Cell["\<\
Enter text here. Enter TraditionalForm input for evaluation in a separate \
cell below:\
\>", "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"84e22b88-5d33-4a44-88d5-7dbc3377880c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Integral]", 
   RowBox[{"x", 
    RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
  SqrtBox["z"]}]], "Input",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"9673bc79-2616-43b9-8645-bb30be97ddaa"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["x", "2"], "2"], "+", 
  SqrtBox["z"]}]], "Output",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"5a591532-5a7b-4785-b868-3c78f7c31a4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Enter bulleted item text here.", "Item",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"e7db3a4c-a54f-4293-b1bc-e8506b7e56b7"],

Cell["Enter item paragraph text here.", "ItemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"e79a94f6-175a-4fce-b3c0-0505b2ecedb1"],

Cell[CellGroupData[{

Cell["Enter subitem text here.", "Subitem",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"8e0dc98d-098f-4993-9c94-b6ecc6b4e8ba"],

Cell["Enter item paragraph text here.", "SubitemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"effcda41-cf86-4213-b207-f521d78ace91"],

Cell[CellGroupData[{

Cell["Enter subitem text here.", "Subsubitem",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"70dd9247-d28a-4d1f-965e-8abd773aa3c3"],

Cell["Enter item paragraph text here.", "SubsubitemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"4737a4db-8020-46cd-808c-6c7c054912e8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
Enter text here. Enter formula for display in a separate cell below:\
\>", "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"dc5c8715-abf3-4c98-ad3c-c07d69a8fb20"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    RowBox[{"x", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
   SqrtBox["z"]}], TraditionalForm]], "DisplayFormula",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"7e2f160d-1cb7-4426-a08c-b87ce86c3952"],

Cell[TextData[{
 "Enter text here. Enter an inline formula like this: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "+", "2"}], TraditionalForm]],ExpressionUUID->
  "4bef9909-8198-4fa0-a0e5-085b9ce94aaa"],
 "."
}], "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"953a7a34-efe8-4451-b745-bb5523a632fe"],

Cell[CellGroupData[{

Cell["Enter numbered item text here.", "ItemNumbered",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"483a5a2e-00da-4e68-b80b-be06b2c55d93"],

Cell["Enter item paragraph text here.", "ItemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"755e4960-5967-4716-ab02-4f29634e23ef"],

Cell[CellGroupData[{

Cell["Enter numbered subitem text here.", "SubitemNumbered",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"27a88d48-83d5-4e44-99a8-76bb00764339"],

Cell["Enter item paragraph text here.", "SubitemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"878ffb05-790e-48c8-a6b9-4a5c41db920f"],

Cell[CellGroupData[{

Cell["Enter subitem text here.", "SubsubitemNumbered",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"3a80d4e5-e95f-4717-87be-c55048a05239"],

Cell["Enter item paragraph text here.", "SubsubitemParagraph",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"c49a18c0-8460-4115-ac73-eb0f8433a834"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
Enter text here. Enter formula for numbered display in a separate cell below:\
\>", "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"05c30c9b-4467-4b0e-bb14-3c008bbf4b4e"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    RowBox[{"x", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
   SqrtBox["z"]}], TraditionalForm]], "DisplayFormulaNumbered",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"701b641f-2b4e-4a0c-be63-a82e0fa2cb98"],

Cell["Enter text here. Enter Wolfram Language program code below.", "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"cbbf63c7-f609-4bb8-a5d4-e8695e5da8f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fun", "[", "x_", "]"}], ":=", "1"}]], "Code",
 FontFamily->"JetBrains Mono",
 CellLabel->"In[98]:=",ExpressionUUID->"38efc9dc-2411-4bfe-aead-d168f187d123"],

Cell["\<\
Enter text here. Enter non-Wolfram Language program code below.\
\>", "Text",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"00c937a7-45f5-4b4a-a8c1-1a6707b880be"],

Cell["\<\
DLLEXPORT int fun(WolframLibraryData libData, mreal A1, mreal *Res)
{
 mreal R0_0;
 mreal R0_1;
 R0_0 = A1;
 R0_1 = R0_0 * R0_0;
 *Res = R0_1;
 funStructCompile->WolframLibraryData_cleanUp(libData, 1);
 return 0;
}\
\>", "Program",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"1a91bf4e-e5a9-4f0c-b7cc-fff36cd82d6b"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4", "Section",
 CellChangeTimes->{3.8795210223191996`*^9},
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"bf996285-a53e-4b33-a65f-eab869ea032c"],

Cell["", "ItemNumbered",
 FontFamily->
  "JetBrains Mono",ExpressionUUID->"e66fd700-0e23-4c7f-9935-3b7725462b93"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.6", "Section",
 CellChangeTimes->{{3.879680987783699*^9, 
  3.8796809885962353`*^9}},ExpressionUUID->"44879938-448a-4854-be7b-\
5821ad6eef42"],

Cell[CellGroupData[{

Cell["a", "Subsection",
 CellChangeTimes->{
  3.8796809917524796`*^9},ExpressionUUID->"937f567b-6c97-43fe-98f3-\
a7dd9c26795c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox["q", 
    RowBox[{"y", "-", "1"}]], "p", 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.8796809951899633`*^9, 3.879681033528902*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"3eca942a-2ad2-4b12-98bf-75480fd4be56"],

Cell[BoxData[
 FractionBox[
  RowBox[{"p", " ", 
   SuperscriptBox["q", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "y"}]]}], 
  RowBox[{"Log", "[", "q", "]"}]]], "Output",
 CellChangeTimes->{3.8796810363697405`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"d6d32182-7477-4350-8220-99d9fb6ecf58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "p"}], ")"}], 
    RowBox[{"y", "-", "1"}]], "p", 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.8796809951899633`*^9, 3.8796810546101894`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"a991f150-6ea7-4d6e-8bdb-4c89eea69cd9"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "p"}], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "y"}]], " ", "p"}], 
  RowBox[{"Log", "[", 
   RowBox[{"1", "-", "p"}], "]"}]]], "Output",
 CellChangeTimes->{3.8796810553758345`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"458c2a6b-ae82-46de-9e15-a5d49095bc07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", "q", ")"}], 
    RowBox[{"y", "-", "1"}]], 
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}], 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.8796809951899633`*^9, 3.879681068700602*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"260a0e2b-b76e-4a9f-97b3-806c7fee1178"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "q"}], ")"}], " ", 
    SuperscriptBox["q", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "y"}]]}], 
   RowBox[{"Log", "[", "q", "]"}]]}]], "Output",
 CellChangeTimes->{3.8796810690912104`*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"8dfc079d-a80b-4625-aa09-7da823998253"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "-", 
  SuperscriptBox["0.5", "0"]}]], "Input",
 CellChangeTimes->{{3.879681544532623*^9, 3.8796815472982616`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"d9e46662-4615-482b-a9e4-04318eceaef5"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{3.8796815481419864`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"0c79b927-0cb4-4ded-936e-0d35f689a040"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{"1", "-", 
   SuperscriptBox["q", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796817414284096`*^9, 3.8796817449284334`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"432213e1-f7f2-4574-9f8e-e2518929856c"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "q"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "q"}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8796817452878075`*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"1e43d915-d14b-42c1-b1da-7b7c3be3e2a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Factor", "[", 
   RowBox[{"1", "-", 
    SuperscriptBox["q", "2"]}], "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8796817414284096`*^9, 3.8796817506315403`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"8efe71f2-e2b4-4d4a-949f-74977479769a"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"q", "-", "1"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"q", "+", "1"}], ")"}]}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8796817509596977`*^9},
 CellLabel->
  "Out[104]//TraditionalForm=",ExpressionUUID->"feeb858c-e19d-440b-8357-\
9875af14621c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"(", 
   RowBox[{"1", "-", 
    SuperscriptBox["q", "2"]}], ")"}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"7f9ac1e2-1dbe-4325-98aa-b0b77bd5aae6"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.879681752615581*^9, 3.8796817584135365`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"0f0e5cc1-01b8-41c6-8a37-3b7061fe2ea5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "(1 - q^2)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - q^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"1", "-", 
               SuperscriptBox["q", "2"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1 - q^2, {q, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max833$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min832$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$765730$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min832$\
765735$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max833$765736$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max833$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min832$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$765730$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min832$\
765735$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max833$\
765736$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$765707[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - $CellContext`q^2, {$CellContext`q, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max833$$]], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min832$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min832$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max833$$]], 
                    1.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min832$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max833$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$765707] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$765707[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    2]]}, ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$765707[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7+MfIPEZabxNSEiIvTAmDShJ+\
V4vvqQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5TW/\
g6ZE1O3Kay0LQvdNcgdZMivQKPrttTQxmFzj5AdT7rlvzXqopMf78Bt8nPCk4MfDVMM4MAz3eVySfs\
ETXnqFix/YnYy4TwtlPeLL16uXW5muPgqEMiTGghH7eFjGfKKIh7SHQNWu2ORHf/HGjPH4qOI/\
hewEiAf3AekeKUAsjBeGYTvCtl5qou5iXIYISRS+\
cJSfO7bYXaKOYyEYwzfGNc7nabItLVKY9NfdKalbpx0d/Ex/I2IXkPS5nd3b8hYVxudg7K6p/\
Tt0Az2/bwit5spQ3TO8dR9qIYcegF9l82rpKnpCqZV3wM6ouaLasNcbzJ0z9j3TItFkM41nbMGB6ZC\
u8XHmL8C/awsscW34m7fvWfPaOEnDZZKjk9lHSgs+\
iaKY88AJtn67OrcNj3Kn4jtEZUsEKJ7Jxlt3iuuNhBV7vCDHWbrwG6Yh6AkSQg3VRx+\
0uy5jZmRBFEgs8u65f9thI1qEE3Nm+\
9kxQZseXJ2TV2oTmIJ2rOzHJ5MsfFbeSy5kmQ94PhIEM1ErR38L6KEuuoCMZGEmMFzT1GsxhldSQqG\
DZD0qQOCeCIST7ZT/um384Xwmkal+\
hupRnceBKcxqeRL8s8CGIzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2\
xP+4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3A7a3Lg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1 - q^2, {q, -2.4, 2.4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max835$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min834$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$765827$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min834$\
765828$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max835$765829$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max835$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min834$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$765827$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min834$\
765828$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max835$\
765829$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$765806[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - $CellContext`q^2, {$CellContext`q, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], 
                    (
                    Piecewise[{{
                    0. + 2.618614682831908 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.618614682831908 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], \
-2.449489742783178], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max835$$]], 
                    (
                    Piecewise[{{
                    0. + 2.618614682831908 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 2.618614682831908 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min834$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min834$$ + 
                    0.004898979485566356, 
                    CalculateUtilities`GraphicsUtilities`Private`max835$$]], 
                    2.449489742783178]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min834$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max835$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$765806] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$765806[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$765806[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7+MfIPEZabwMPiAh9sKYNKAk5Xu9+\
JJauHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d73HRzJK+71eT1+\
15oPkNL2Bp0fW7MhpLgtB905zBVozKdIr+\
Oy2NTGYXeDkB1Dvu27Ne6mmxPjzG3yf8KTgxMBXwzgzDPR4X5F8whJde4aKHdufjLlMCGc/\
4cmrrZevN7c8CoYyJMaAEvp5W8R8ooiGtIdA16zZ5kR888eN8vip4DyG7wWIBPQD6x0pQi2MFIRjOs\
G3Xmqi7mJehghKFL1wlpw4t9teoI1iIhvBNMc3zuVqsy0uUZn21NwrqVmlHx/\
9TXwgYxeS97ic3dnxFxbG5WLvrKj+OXUDPL9tC6/\
kyVLeML13HGkjhh2DXmTzaesqeUKqlnXBz6i6oNmy1hjPnzD1P9Ih02YxjGdtw4Dpka3wcuUtwr9oC\
y9zbPmZtO9b89k7SsBlk6GS20dJCz6LopnywAu0fbo6tw6PcafiO0ZnSAUrnMjGWXaL646HFXi9I8R\
Yu/EapCPqCRBBDtZFHbe7LGNmZ0IUSSzw7Lp+2WMjWYcScGf72jNBmR1fnpBVaxOag3Su7sQkky9/\
VNxKLmeaDHk/EAYyUCtFfwvroyy5go5kYCQxXtDUazCHVVJDooJlPyhB4pwIhpDsl/24b/\
7hfCWQqn2F6lKexYErzWl4Ev2ywIcgMjNpbteBoyu4bTGbSJ7UqotYms5Pm/\
Ux3W8y3bihOdBDSQgtSfhA7/aEbk/4i3vCwg7cLQndktAtCd2S0C0J/++S4CLGf6XfEGm3Hg=="]]}\
; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Geometric figure", "scanner" -> "Geometry", "id" -> 
     "GeometricFigure (ofBoundary)", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"parabola\"", 
              $CellContext`TagBoxWrapper[
              "Entity" -> {$CellContext`GeometryData, "Parabola"}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Properties", "input" -> 
         "GeometricFigure (ofBoundary)__Properties"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - q^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"-", 
                RowBox[{"(", 
                  RowBox[{"q", "-", "1"}], ")"}]}], " ", 
              RowBox[{"(", 
                RowBox[{"q", "+", "1"}], ")"}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "AlternateForm__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Select[Solve[1 - q^2 == 0, q], Element[q /. #1, Reals] & ]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"q", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"q", "\[LongEqual]", "1"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true", "buttonstyle" -> 
         "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Polynomial discriminant", "scanner" -> "Expression", 
     "id" -> "PolynomialDiscriminant", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Discriminant[1 - q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"\[CapitalDelta]", "\[LongEqual]", "4"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show class number", "input" -> 
         "PolynomialDiscriminant__Show class number"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Property as a function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsAFunction", "position" -> "700",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[1 - q^2 == 1 - (-q)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[1 - q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "q"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "q"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "2"}], " ", "q"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1 - q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "q"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"q", "-", 
                    FractionBox[
                    SuperscriptBox["q", "3"], "3"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Global maximum", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMaximum", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[1 - q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"max", "\[NoBreak]", 
                  RowBox[{"{", 
                    TagBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], HoldForm], "}"}]}], 
                "\[LongEqual]", "1"}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                TagBox["q", HoldForm], "\[LongEqual]", "0"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMaximum__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[1 - q^2, {q, -1, 1}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "1"}], "1"], 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "q"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["4", "3"], Identity], "\[TildeTilde]", 
              TagBox["1.3333333333333333`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> 
     "Definite integral area above the axis between the smallest and largest \
real roots", "scanner" -> "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralAreaAboveTheAxisBetweenTheSmallestAndLargestRealRoots", 
     "position" -> "1200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "N[Integrate[(1 - q^2) UnitStep[1 - q^2], {q, -1, 1}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "1"}], "1"], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], ")"}], " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}]}]}, "UnitStepSeq"]}], 
                   RowBox[{"\[DifferentialD]", "q"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["4", "3"], Identity], "\[TildeTilde]", 
              TagBox["1.3333333333333333`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralAreaAboveTheAxisBetweenTheSmallestAndLargestRealRo\
ots__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "\[Theta](x) is the Heaviside step function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/UnitStep.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/UnitStep", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HeavisideStepFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.46036993281050914`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.46036993281050914`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.46036993281050914`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.46036993281050914`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.46036993281050914`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.46036993281050914`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.46036993281050914`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.46036993281050914`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.46036993281050914`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.46036993281050914`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5424798$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$5424803$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$5424804$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$5424805$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$5424806$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$5424807$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$5424808$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$5424809$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$5424810$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$5424811$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
5424812$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
5424813$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$5424814$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$5424815$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.46036993281050914`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.46036993281050914`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.46036993281050914`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.46036993281050914`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.46036993281050914`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5424798$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$5424803$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$5424804$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$5424805$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$5424806$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$5424807$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$5424808$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$5424809$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$5424810$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$5424811$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
5424812$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
5424813$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
5424814$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$5424815$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`q}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    4.032993161855452/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    2.016496580927726], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    2.016496580927726]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(1 - $CellContext`q^2) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`q < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`q,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`q, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    2.016496580927726]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    2.016496580927726], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 2.016496580927726], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`q}, -2], 
                    Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`q}, -2], 
                    Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`q}, -2], 
                    Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`q}, -2], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`q] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(1 - $CellContext`q^2) == 0, $CellContext`q, Reals], 1, 
                    False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`q, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
q] == Sqrt[1 + D[1 - $CellContext`q^2, $CellContext`q]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`q, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]}], $CellContext`q], \
{$CellContext`q, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 2.016496580927726]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], 
                    1}], $CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 2.016496580927726], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], 
                    1}]], $CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`q) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) $CellContext`q + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`q)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`q) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) $CellContext`q + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`q)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`q)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q], 1}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`q)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q], 1}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], 1}/(($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q], 1}/(($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    With[{
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
q - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
q - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][$CellContext`q]^2), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`q}, (-2) $CellContext`q][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`q}, (-2) $CellContext`q][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`q}, 1 - $CellContext`q^2], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{-2, {2, 0, 0}}}, {
                    0, 1, 2, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["q", "2"]}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.46036993281050914`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.46036993281050914`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.46036993281050914`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.46036993281050914`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.46036993281050914`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkRhF4wsSoxtj0oCSlO/\
1kkti4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJShFBU+u4bM7xoSg94CRHxA7301j3gs5I9qd3+D7hEUFIxq+\
asqopqCmB5LkGY1U7RlLemJ+MmUiIoz+\
hGevhtvDndc7DgZjGROtQXL1si1knkmiIOkh0A1j3jHCv7nj4/L4qWAshO8F8AjUQ+\
OdSBIbGMEJw3y8b73aTN3DxDThMZHxpdNk5Tlqe4HSkvJ0ArMc37iYrBdtgYlMlePmfsnNOgW58G/\
hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+D5bVt4KU5XE4f57TLkjWh6AmqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TC224YBs2NT49XaW4YftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8\
sBJtH26KjcOh3G34jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQQA7GFVtu92hK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe5ER9mXPypuJZdzTYa8H3INKci1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKoDieqSjsWBLc2ZfxL9ssBHwFOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb6cHuMY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc1max$$ = 
                 ArcTan[2], $CellContext`sc1min$$ = 0, $CellContext`sc2$$ = 
                 0, $CellContext`sc2max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc2min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc3$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`sc3max$$ = 
                 0, $CellContext`sc3min$$ = -
                  ArcTan[2], $CellContext`scColor1$$ = 
                 RGBColor[
                  0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                 RGBColor[
                  0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                 12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                 False, $CellContext`scTF3$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3$$], -ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor3$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc3min$$], -ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3max$$], 0, 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount3$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3120567$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3120572$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3120573$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$3120574$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$3120575$$ = 
                 False, $CellContext`sc1$3120576$$ = 
                 0, $CellContext`sc2$3120577$$ = 
                 0, $CellContext`sc3$3120578$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$3120579$$ = 
                 False, $CellContext`sc1min$3120580$$ = 
                 0, $CellContext`sc1max$3120581$$ = 
                 0, $CellContext`scCount1$3120582$$ = 
                 0, $CellContext`sc2min$3120583$$ = 
                 0, $CellContext`sc2max$3120584$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc1max$$ = 
                    ArcTan[2], $CellContext`sc1min$$ = 0, $CellContext`sc2$$ = 
                    0, $CellContext`sc2max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc2min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc3$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`sc3max$$ = 
                    0, $CellContext`sc3min$$ = -
                    ArcTan[2], $CellContext`scColor1$$ = 
                    RGBColor[
                    0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                    RGBColor[
                    0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                    12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                    False, $CellContext`scTF3$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3120567$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3120572$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3120573$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$3120574$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$3120575$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$3120576$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$3120577$$, 0], 
                    Hold[$CellContext`sc3$$, $CellContext`sc3$3120578$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$3120579$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$3120580$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$3120581$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$3120582$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$3120583$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$3120584$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`q}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 1]] + (
                    CalculateScan`PlotterScanner`Private`i - 
                    1) (Part[{$CellContext`scCount1$$, \
$CellContext`scCount2$$, $CellContext`scCount3$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1)^(-1) (Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}, CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 
                    1}], {}], {CalculateScan`PlotterScanner`Private`j, 3}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3120552, \
$CellContext`C$3120553, $CellContext`C$3120554}, $CellContext`C$3120552 + \
$CellContext`q $CellContext`C$3120553 + $CellContext`q^2 \
$CellContext`C$3120554], Evaluate][$CellContext`q, 
                    Apply[Sequence, {1, 0, -1}]], {$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.4041241452319315`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.4041241452319315`]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3120552, \
$CellContext`C$3120553, $CellContext`C$3120554}, $CellContext`C$3120552 + \
$CellContext`q $CellContext`C$3120553 + $CellContext`q^2 \
$CellContext`C$3120554], Evaluate][$CellContext`q, 
                    Apply[Sequence, {1, 0, -1}]], {$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.4041241452319315`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.4041241452319315`]}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`q, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3120552, \
$CellContext`C$3120553, $CellContext`C$3120554}, $CellContext`C$3120552 + \
$CellContext`q $CellContext`C$3120553 + $CellContext`q^2 \
$CellContext`C$3120554], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.4041241452319315`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.4041241452319315`]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 C[2], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{Derivative[3][$CellContext`y][$CellContext`q] == 
                    0}], 1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 C[2], {
                    C[0] -> 1, C[1] -> 0, C[2] -> -1}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 C[2], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2]}, 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 C[2], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}], CalculateScan`PlotterScanner`Private`j]}], {
                    1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 3}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`q -> $CellContext`q3069]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{$CellContext`sc3$$, -ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    8}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 9}, {{$CellContext`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`sc1max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 14}, {{$CellContext`scColor2$$, 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`sc2max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{$CellContext`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 19}, {{$CellContext`scColor3$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    20}, {{$CellContext`sc3min$$, -ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{$CellContext`sc3max$$, 0, 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{$CellContext`scCount3$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 23}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`q3069, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "q"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfEdvoRyRYx8akASUp33tLnMTCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z0/EUHS7/\
V66qYxHwSLky08PTNmJGa5KHj8/\
jyXRCkqeHIDn90zJiR6nzD4QWLnu23MgZAz0O78Bt8HFhUMNPmqKaOaEjU9lJBnNFK1ZyzpqfnJlIk\
IGP1JXuxu77waDocOBmMZg9ZEcrXbFjLPJCiS9BDoljF7DPg3d3xaHj8VjIXke0F4RNRj451IiA2M4\
MAwH+9brzdTDzAxDTwGGV85TVaeo7YXKC0pTydkluMbl5O13RYYZKocNw9LbtYpyIV/Bx+\
I0MbkPDZpe7YE+oVxzei7KKt/zt0Az2/\
bwktxtpo4zO8dQ95A01Oilul82bpOjpGqa230c66uar5sNMjLp0z9v3RMlV4OY6dtGGR2Ymq8WnvL8\
K/bwoscu34u7kfGfHaOEnDVcKgE91HEBZtH0Ux54CTaPl2VG4fDuF/\
xHaLTp4IVTmDiLPvF9seTCrzeFEKs3XQD0uH1DAhITowrttzu05TqUQYSIgM8v65fNtlE1KF43Nm+\
9pTH1AwwR8i65QnNUbJQd9BR9uWPilvJ5UKTIe9HXJOUyLWiv4v1kYZcHk+\
EZyQhXtDUqzeHVVJjkN6yH5QgYQ6cIiT9ZT72m3u4WAmk6lCiuqRjcWBLc+\
6fRL8s8DHhqc6aO7bn6PJuW8wmEGe16gKaJIvTZnNM95tMN25oDnRfEnxL4j/Qu02h2xT+\
6qawtAd3a0K3JnRrQrcmdGvC/7sm2IjxX+k3CP64Rg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {
    "title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 8, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  0.759539957301798, 0.7764186230196157}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 8, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
                    11, 12}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    0.759539957301798, 0.7764186230196157}}}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1159660$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$1159665$$ = 
                 0, CalculateScan`PlotterScanner`Private`sf$1159666$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 8, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`P$$ = {
                    0.759539957301798, 0.7764186230196157}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1159660$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$1159665$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$1159666$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[ReplaceAll[$CellContext`q, 
                    Solve[
                    1 - $CellContext`q^2 == #, $CellContext`q]]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-1.6034732431926844`, 
                    1.6034732431926844`}, {-1.6034732431926844`, 
                    1.6034732431926844`}}, 1, 2]], 
                    
                    Part[{{-1.6034732431926844`, 
                    1.6034732431926844`}, {-1.6034732431926844`, 
                    1.6034732431926844`}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-1.6034732431926844`, 
                    1.6034732431926844`}, {-1.6034732431926844`, 
                    1.6034732431926844`}}, 2, 2]], 
                    
                    Part[{{-1.6034732431926844`, 
                    1.6034732431926844`}, {-1.6034732431926844`, 
                    1.6034732431926844`}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-1.6878665717817731`, 
                    1.6878665717817731`}, {-1.6878665717817731`, 
                    1.6878665717817731`}}, ImageMargins -> 20, ImageSize -> 
                    240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 8, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
                    11, 12}, ControlType -> SetterBar, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    0.759539957301798, 0.7764186230196157}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkQoDaR+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3k2HL7aeb2942AwljFoTSRXL9tC5pkERZIeAt0w5h0D/\
s0dH5fHTwVjIfleEB4R9dB4JxJiAyM4MMzH+9arzdQ9TEwDj0HGl06Tleeo7QVKS8rTCZnl+\
MbFZA3bAoNMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetA2DzI5NjVdrbxl+uy28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgOy4ri2"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "15", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.74", "parsetiming" -> "0.148", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP4019227a13i5hde6445300003ah82begacb18c4f", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa4020227a13i5hde6445300000f4h4211g5cec2e08884920455003441207", "version" -> 
    "2.6", "inputstring" -> "(1 - q^2)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 12, 10, 12, 22, 41.6635491`9.372331139795916}, "Line" -> 
    105, "SessionID" -> 26935065509461206242}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "(1 - q^2)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{491., {1304.3544921875, 1309.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8796817617260323`*^9},ExpressionUUID->"8dad4a49-657b-43c3-8826-\
2bfb1b52e5b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"p", " ", "q"}], "+", 
   RowBox[{"p", " ", 
    SuperscriptBox["q", "2"]}], "+", "p"}], " ", "/.", 
  RowBox[{"p", "->", 
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8796818962507043`*^9, 3.879681932982709*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"2913f2b6-87ce-4104-97a3-38bc8fff6d51"],

Cell[BoxData[
 RowBox[{"1", "-", "q", "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}], " ", 
   SuperscriptBox["q", "2"]}]}]], "Output",
 CellChangeTimes->{{3.8796819202866693`*^9, 3.8796819333889556`*^9}},
 CellLabel->
  "Out[107]=",ExpressionUUID->"ff92713a-6eb5-48cd-a109-058b88d032a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"p", " ", "q"}], "+", 
     RowBox[{"p", " ", 
      SuperscriptBox["q", "2"]}], "+", "p"}], " ", "/.", 
    RowBox[{"p", "->", 
     RowBox[{"(", 
      RowBox[{"1", "-", "q"}], ")"}]}]}], "//", "Simplify"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8796818962507043`*^9, 3.879681939585396*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"46a5246d-9864-4efb-8f54-07d795df8c26"],

Cell[BoxData[
 FormBox[
  RowBox[{"1", "-", 
   SuperscriptBox["q", "3"]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.879681939882267*^9},
 CellLabel->
  "Out[108]//TraditionalForm=",ExpressionUUID->"8232e4c9-ca06-4f52-b68b-\
e19df78b7e2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"1", "-", "q", "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "q"}], ")"}], " ", 
   SuperscriptBox["q", "2"]}]}]], "Output",
 CellChangeTimes->{{3.8796819202866693`*^9, 
  3.8796819333889556`*^9}},ExpressionUUID->"ae16da02-8bfc-4da9-af1b-\
28a952fecc5a"]], "WolframAlphaLong",
 CellChangeTimes->{{3.8796819462885017`*^9, 3.8796819516508207`*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"9046db7b-dd0c-4464-b2c4-9a5cf0488c4e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "1 - q + (1 - q) q + (1 - q) q^2", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "AlternateForm__Step-by-step solution", "AlternateForm__Hide steps", 
      "ExpandedForm__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - q + (1 - q) q + (1 - q) q^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"1", "-", "q", "+", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "+", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"1", "-", "q"}], ")"}], " ", 
                 SuperscriptBox["q", "2"]}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[1 - q + (1 - q) q + (1 - q) q^2, {q, -0.048, 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max8376$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min8375$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2241861$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min8375$\
2241866$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max8376$2241867$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max8376$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min8375$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2241861$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8375$\
2241866$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max8376$\
2241867$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241838[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2, {$CellContext`q, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$], 
                    (
                    Piecewise[{{
                    0.5000000000000001 + 
                    0.5861039035139467 Tan[1.5040801783846716` #], # < 0}}, 
                    0.5000000000000001 + 
                    0.5861039035139466 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$], \
-0.04825000000000001], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$]], 
                    (
                    Piecewise[{{
                    0.5000000000000001 + 
                    0.5861039035139467 Tan[1.5040801783846716` #], # < 0}}, 
                    0.5000000000000001 + 
                    0.5861039035139466 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$ + 
                    0.0010965, 
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$]], 
                    1.0482500000000001`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min8375$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max8376$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2241838]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241838[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241838[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEStD4gsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+\
Gw53t169eOBiMZQxaE8nVy7aQeSZBkaSHQDeMeceAf3PHx+\
XxU8FYSL4XhEdEPTTeiYTYwAgODPPxvvVqM3UPE9PAY5DxpdNk5Tlqe4HSkvJ0QmY5vnExWdttgUGm\
ynFzv+RmnYJc+LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyBpqeELVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+\
lI6r0chjDtmGQ2bGp8WrtLcPvtIUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb4NBuE4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[1 - q + (1 - q) q + (1 - q) q^2, {q, -1.8, 1.8}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max8378$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min8377$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2241958$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min8377$\
2241959$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max8378$2241960$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max8378$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min8377$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2241958$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8377$\
2241959$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max8378$\
2241960$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241937[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2, {$CellContext`q, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$], 
                    (
                    Piecewise[{{
                    0. + 1.9425836253798336` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.9425836253798336` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$], \
-1.8171205928321397`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$]], 
                    (
                    Piecewise[{{
                    0. + 1.9425836253798336` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.9425836253798336` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$ + 
                    0.0036342411856642794`, 
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$]], 
                    1.8171205928321397`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["q", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min8377$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max8378$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2241937]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241937[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2241937[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/\
wBEs9IWyohHpCALrustEBJynu9ySSxcO1gO3vh58FjN0mz7VaK6QJapQ+jetIcz5w5M51nRyJI+\
r1eT1035qNgcXILT0+NGYt5LgoefzjNJShFBU+u4bO7xoSgd4GRM4id76Yxe0LOiXbnN/g+\
YVHBiIZvmjKqKajZviR5RiNVeyaSHpufzJiICKM/\
4flwONp5PXrlYDCWCdEaJFcv20LmmSQKkh4C3TDmPSP8uzs+KY+fC8ZC+\
FEAj0A9Mt6pJLGBEZwwzMf71qvN1H1MTBMeExlfOk1WnuO2FygtKU+nMM/\
xjYvJ2mkLTGSqHDcPSm42KciFfxsfiNDG5Dw2aXu2BPqFccXoOy+\
rf87dAM9v28JLcbKeOMzvHUPeiKbHoFbpfNG6To6Rqmtt9AuuLmu+bDXIi6dM/\
b90SJVeDWPYNgyYH5kar9feKvyoLbzIsesX4n5ozBfnKAHXDYdKcJ9EXLBFFM2UB06i7dNVuXE4jHs\
V3yE6fSpY4QQmzrJfbH88rsDrTSHE2s22IB1ez4AAcjCu2HK7S1OqxxmRJDLAi+\
v6ZZNNRR2Kx53ta095TM0Ac4RsWp7QHCRLdSc6yr7+UXEruZxrMuT9gGtIQW4U/\
R2sjzTk8ngqPCMJ8YKmXr05rJKaEOkt+0EJEuaEU4Skv8zHfnMPlyuBVO1LVJd0LA5saU79k+\
iXBT4EnuqsuWN7ji7vtsVsAnFSqy6gSbI8bbbHdL/\
JdOOG5kD3JcG3JP4DvdsUuk3hr24KK3twtyZ0a0K3JnRrQrcm/L9rgo0Y/5V+A9fLuIY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - q + (1 - q) q + (1 - q) q^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"q", "-", "1"}], ")"}], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["q", "2"], "+", "q", "+", "1"}], ")"}]}], 
                ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[1 - q + (1 - q) q + (1 - q) q^2, Extension -> {(-1)^(2/3), \
(-1)^(1/3)}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{"q"}]}], "+", 
                   RadicalBox[
                    RowBox[{"-", "1"}], "3"], "-", "1"}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"q", "-", "1"}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"q", "+", 
                   RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded forms", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[1 - q + (1 - q) q + (1 - q) q^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"1", "-", 
               SuperscriptBox["q", "3"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Expand the following\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["q", HoldForm], "+", 
                    RowBox[{
                    TagBox["q", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox["q", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"q", " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "q"}], ")"}]}], "+", 
                    RowBox[{"q", " ", "1"}]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["q", HoldForm], "+", 
                    TagBox[
                    FrameBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"q", " ", "q"}], ")"}]}], "+", "q"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     HoldForm], "+", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox["q", HoldForm], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    TagBox["q", HoldForm]}], ")"}]}], "\[LongEqual]", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]]}]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["q", HoldForm], "+", 
                    TagBox["q", HoldForm], "+", 
                    TagBox[
                    FrameBox[
                    RowBox[{"-", 
                    SuperscriptBox["q", "2"]}], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm], "+", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "q"}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["q", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "q"}], ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["q", "2"], " ", "1"}]}], HoldForm], 
                    TraditionalForm], DisplayForm]}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FrameBox[
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["q", "2"], "-", 
                    SuperscriptBox["q", "3"]}], ")"}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "-", 
                    SuperscriptBox["q", "2"], "+", "q", "-", "q", "+", "1"}], 
                    HoldForm], TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    TagBox["q", HoldForm]}], ")"}]}], "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"2", "+", "1"}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], ")"}]}]}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FrameBox[
                    RowBox[{"(", 
                    RowBox[{"-", 
                    SuperscriptBox["q", "3"]}], ")"}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "+", 
                    SuperscriptBox["q", "2"], "-", 
                    SuperscriptBox["q", "2"], "+", "q", "-", "q", "+", "1"}], 
                    HoldForm], TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"2", "+", "1"}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", "3"}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["q", 
                    FrameBox[
                    "3", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]]}], "+", 
                    SuperscriptBox["q", "2"], "-", 
                    SuperscriptBox["q", "2"], "+", "q", "-", "q", "+", "1"}], 
                    HoldForm], TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Combining \"", "\"like \"", "\"terms, \"", 
                    TemplateBox[{", ", "\", \"", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox["q", HoldForm], "-", 
                    TagBox["q", HoldForm]}], HoldForm], "\[LongEqual]", 
                    "0"}]}, "RowWithSeparators"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["q", "3"]}], "+", 
                    SuperscriptBox["q", "2"], "-", 
                    SuperscriptBox["q", "2"], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{", ", "\", \"", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]], "-", 
                    SuperscriptBox[
                    TagBox["q", HoldForm], 
                    TagBox["2", HoldForm]]}], HoldForm], "\[LongEqual]", 
                    "0"}]}, "RowWithSeparators"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["q", "3"]}], "+", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "ExpandedForm__Hide steps"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Real root", "scanner" -> "Reduce", "id" -> "RealRoot", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Select[Solve[1 - q^3 == 0, q], Element[q /. #1, Reals] & ]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"q", "\[LongEqual]", "1"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "RealRoot__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Complex roots", "scanner" -> "Reduce", "id" -> 
     "ComplexSolution", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[Select[Solve[1 - q^3 == 0, q],  !Element[q /. #1, Reals] & \
]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"q", "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", 
                   RowBox[{
                    FractionBox["1", "2"]}]}], "-", 
                 FractionBox[
                  RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}], "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[Select[Solve[1 - q^3 == 0, q],  !Element[q /. #1, Reals] & \
]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"q", "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", 
                   RowBox[{
                    FractionBox["1", "2"]}]}], "+", 
                 FractionBox[
                  RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}], "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Cartesian form", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Cartesian form", "input" -> 
           "ComplexSolution__Cartesian form"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Trigonometric form", "input" -> 
           "ComplexSolution__Trigonometric form"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Exponential form", "input" -> 
           "ComplexSolution__Exponential form"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "ComplexSolution__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ComplexSolution__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Roots in the complex plane", "scanner" -> "Reduce", 
     "id" -> "RootsInTheComplexPlane", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               GrayLevel[0.8], 
               AbsoluteThickness[1], 
               CircleBox[{0, 0}, 1.], 
               
               LineBox[{{{0, 0}, {1., 0}}, {{0, 
                  0}, {-0.5000000000000001, -0.8660254037844386}}, {{0, 
                  0}, {-0.4999999999999998, 0.8660254037844387}}}]}, {
               RGBColor[1, 0, 0], 
               PointSize[Medium], 
               
               PointBox[{{
                 1., 0}, {-0.5000000000000001, -0.8660254037844386}, \
{-0.4999999999999998, 0.8660254037844387}}]}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    
                    Nearest[{{0.4347826086956522, 
                    0.}, {-0.21739130434782616`, -0.3765327842541038}, \
{-0.21739130434782603`, 
                    0.3765327842541038}} -> {{
                    1., 0}, {-0.5000000000000001, -0.8660254037844386}, \
{-0.4999999999999998, 0.8660254037844387}}]]][#/{2.3, 2.3}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, PlotRangePadding -> 0, 
              PlotRangeClipping -> True, 
              PlotRange -> {{-1.15, 1.15}, {-1.15, 1.15}}, Frame -> True, 
              FrameTicks -> Automatic, FrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], ImageSize -> {{264.}, {264.}}, AspectRatio -> Automatic, 
              Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], AxesLabel -> {
                FormBox["\"Re(q)\"", TraditionalForm], 
                FormBox["\"Im(q)\"", TraditionalForm]}, FrameLabel -> None, 
              RotateLabel -> False}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Polynomial discriminant", "scanner" -> "Expression", 
     "id" -> "PolynomialDiscriminant", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Discriminant[1 - q + (1 - q) q + (1 - q) q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"\[CapitalDelta]", "\[LongEqual]", 
              RowBox[{"-", "27"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[1 - q + (1 - q) q + (1 - q) q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "q"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "q"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"1", "-", "q", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", 
                    SuperscriptBox["q", "2"]}]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "3"}], " ", 
                 SuperscriptBox["q", "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[1 - q + (1 - q) q + (1 - q) q^2, q]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", "q", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", 
                    SuperscriptBox["q", "2"]}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "q"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"q", "-", 
                    FractionBox[
                    SuperscriptBox["q", "4"], "4"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.7140432137448117, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.7140432137448117, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.7140432137448117, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.7140432137448117, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.7140432137448117, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.515580475809229, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.9616192499061698, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.515580475809229, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.9616192499061698, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.7140432137448117, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.7140432137448117, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.7140432137448117, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.7140432137448117, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.7140432137448117, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2689371$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$2689376$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$2689377$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$2689378$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$2689379$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$2689380$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$2689381$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$2689382$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$2689383$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$2689384$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
2689385$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
2689386$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$2689387$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$2689388$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.7140432137448117, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.7140432137448117, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.7140432137448117, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.7140432137448117, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.7140432137448117, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.515580475809229, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.9616192499061698}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2689371$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$2689376$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$2689377$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$2689378$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$2689379$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$2689380$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$2689381$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$2689382$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$2689383$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$2689384$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
2689385$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
2689386$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
2689387$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$2689388$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`q}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    2.3079137285547597`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    1.1539568642773799`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    1.1539568642773799`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(1 - $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`q < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`q,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`q, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    1.1539568642773799`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    1.1539568642773799`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 1.1539568642773799`], "TiltAngle" -> 
                    
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-4, {2, 0, 3}}, {-2, {2, 0, 0}}, {2, {2, 0, 1}}, {
                    1, {2, 0, 2}}}, {0, 4, 4, 0, 
                    0}, {{19, 0, 1}, {10, 2, 2}, {13, 2, 1, 2}, {10, 1, 1}, {
                    16, 1, 2, 1}, {10, 3, 2}, {16, 2, 0, 2}, {10, 0, 3}, {13, 
                    3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`q}, -2 + 2 (1 - $CellContext`q) - 
                    4 $CellContext`q], Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-4, {2, 0, 3}}, {-2, {2, 0, 0}}, {2, {2, 0, 1}}, {
                    1, {2, 0, 2}}}, {0, 4, 4, 0, 
                    0}, {{19, 0, 1}, {10, 2, 2}, {13, 2, 1, 2}, {10, 1, 1}, {
                    16, 1, 2, 1}, {10, 3, 2}, {16, 2, 0, 2}, {10, 0, 3}, {13, 
                    3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`q}, -2 + 2 (1 - $CellContext`q) - 
                    4 $CellContext`q], Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-4, {2, 0, 3}}, {-2, {2, 0, 0}}, {2, {2, 0, 1}}, {
                    1, {2, 0, 2}}}, {0, 4, 4, 0, 
                    0}, {{19, 0, 1}, {10, 2, 2}, {13, 2, 1, 2}, {10, 1, 1}, {
                    16, 1, 2, 1}, {10, 3, 2}, {16, 2, 0, 2}, {10, 0, 3}, {13, 
                    3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`q}, -2 + 2 (1 - $CellContext`q) - 
                    4 $CellContext`q], Evaluate]}, {$CellContext`q, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 
                    0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {16, 2, 0, 
                    3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {10, 0, 
                    4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {10, 2, 3}, {
                    13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {40, 56, 3, 0,
                     0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-4, {2, 0, 3}}, {-2, {2, 0, 0}}, {2, {2, 0, 1}}, {
                    1, {2, 0, 2}}}, {0, 4, 4, 0, 
                    0}, {{19, 0, 1}, {10, 2, 2}, {13, 2, 1, 2}, {10, 1, 1}, {
                    16, 1, 2, 1}, {10, 3, 2}, {16, 2, 0, 2}, {10, 0, 3}, {13, 
                    3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`q}, -2 + 2 (1 - $CellContext`q) - 
                    4 $CellContext`q], 
                    Evaluate][$CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`q] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(1 - $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2) == 
                    0, $CellContext`q, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`q, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
q] == Sqrt[1 + D[1 - $CellContext`q + (1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2, $CellContext`q]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`q, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]}], $CellContext`q], \
{$CellContext`q, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 1.1539568642773799`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], 
                    1}], $CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 1.1539568642773799`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], 
                    1}]], $CellContext`q], {$CellContext`q, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`q) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) $CellContext`q + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`q)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`q) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) $CellContext`q + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`q) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`q)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`q)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q], 1}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`q)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q], 1}, {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], 1}/(($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q], 1}/(($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`q + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
q - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
q - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`q, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]}, 
                    ParametricPlot[{$CellContext`q, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], 
                    Evaluate][$CellContext`q] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q] ($CellContext`q - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][$CellContext`q]^2), {$CellContext`q, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {{1, {2, 0, 0}}}, {
                    0, 1, 6, 0, 0}, {{19, 0, 1}, {10, 0, 2}, {13, 2, 1, 2}, {
                    16, 2, 0, 3}, {40, 56, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {
                    10, 0, 4}, {13, 4, 1, 3, 5, 4}, {1}}, 
                    Function[{$CellContext`q}, 
                    
                    Block[{Compile`$4681, Compile`$4708}, 
                    Compile`$4681 = -$CellContext`q; 
                    Compile`$4708 = 1 + Compile`$4681; 
                    1 + Compile`$4681 + Compile`$4708 $CellContext`q + 
                    Compile`$4708 $CellContext`q^2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {2, {2, 0, 1}}, {1, {2, 0, 2}}}, {
                    0, 3, 5, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {19, 0, 2}, {
                    10, 2, 3}, {13, 3, 2, 3}, {10, 1, 2}, {16, 2, 3, 0, 2}, {
                    40, 56, 3, 0, 0, 3, 0, 3}, {19, 3, 4}, {13, 1, 2, 4, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`q}, (-2) $CellContext`q + 
                    2 (1 - $CellContext`q) $CellContext`q - $CellContext`q^2],
                     Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", 
                    SuperscriptBox["q", "2"]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "q"}], ")"}], " ", "q"}], "-", "q", "+",
                     "1"}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.515580475809229, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.9616192499061698, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.7140432137448117, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.7140432137448117, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.7140432137448117, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.7140432137448117, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.7140432137448117, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button["1", CalculateScan`PlotterScanner`Private`ar$$ = 1,
                     ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMYEMTfEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPN7aefFye+\
eph8FYRsQYUEJvt4XMp4poSHsIdMWat5yIb/74oDx+KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkPWsLTFSmPTd3Sm7WKciHfx0fyNjF5D0uaXd2B\
IaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDmOrbRgwO7Q1Xq29ZfjnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DTpXuK4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1200", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc1max$$ = 
                 ArcTan[2], $CellContext`sc1min$$ = 0, $CellContext`sc2$$ = 
                 0, $CellContext`sc2max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc2min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc3$$ = 
                 0, $CellContext`sc3max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc3min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc4$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`sc4max$$ = 
                 0, $CellContext`sc4min$$ = -
                  ArcTan[2], $CellContext`scColor1$$ = 
                 RGBColor[
                  0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.33311066666666667`, 0.5032283333333333, 
                   0.26154733333333335`], $CellContext`scColor3$$ = 
                 RGBColor[
                  0.8562609999999999, 0.742794, 
                   0.31908333333333333`], $CellContext`scColor4$$ = 
                 RGBColor[
                  0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                 12, $CellContext`scCount4$$ = 12, $CellContext`scTF1$$ = 
                 True, $CellContext`scTF2$$ = False, $CellContext`scTF3$$ = 
                 False, $CellContext`scTF4$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.2779945066540234, CalculateScan`PlotterScanner`Private`x2$$ = 
                 1.0428056573453781`, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.2779945066540234, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    1.0428056573453781`, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc4$$], -ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 4], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor3$$], 
                    RGBColor[
                    0.8562609999999999, 0.742794, 0.31908333333333333`], 
                    " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc3min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount3$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF4$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 4], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor4$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc4min$$], -ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 4, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc4max$$], 0, 
                    Subscript[
                    RawBoxes["c"], 4, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount4$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7], 
                    Manipulate`Place[8]}], 
                    Manipulate`Place[9], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[10], " | ", 
                    Manipulate`Place[11]}], 
                    Row[{
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13], "  ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], " | ", 
                    Manipulate`Place[16]}], 
                    Row[{
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18], "  ", 
                    Manipulate`Place[19]}], 
                    Row[{
                    Manipulate`Place[20], " | ", 
                    Manipulate`Place[21]}], 
                    Row[{
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23], "  ", 
                    Manipulate`Place[24]}], 
                    Row[{
                    Manipulate`Place[25], " | ", 
                    Manipulate`Place[26]}], 
                    Row[{
                    Manipulate`Place[27], "  ", 
                    Manipulate`Place[28], "  ", 
                    Manipulate`Place[29]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3798270$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3798275$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3798276$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$3798277$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$3798278$$ = 
                 False, $CellContext`sc1$3798279$$ = 
                 0, $CellContext`sc2$3798280$$ = 
                 0, $CellContext`sc3$3798281$$ = 
                 0, $CellContext`sc4$3798282$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$3798283$$ = 
                 False, $CellContext`sc1min$3798284$$ = 
                 0, $CellContext`sc1max$3798285$$ = 
                 0, $CellContext`scCount1$3798286$$ = 
                 0, $CellContext`sc2min$3798287$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc1max$$ = 
                    ArcTan[2], $CellContext`sc1min$$ = 0, $CellContext`sc2$$ = 
                    0, $CellContext`sc2max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc2min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc3$$ = 
                    0, $CellContext`sc3max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc3min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc4$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`sc4max$$ = 
                    0, $CellContext`sc4min$$ = -
                    ArcTan[2], $CellContext`scColor1$$ = 
                    RGBColor[
                    0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], $CellContext`scColor3$$ = 
                    RGBColor[
                    0.8562609999999999, 0.742794, 
                    0.31908333333333333`], $CellContext`scColor4$$ = 
                    RGBColor[
                    0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                    12, $CellContext`scCount4$$ = 12, $CellContext`scTF1$$ = 
                    True, $CellContext`scTF2$$ = False, $CellContext`scTF3$$ = 
                    False, $CellContext`scTF4$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.2779945066540234, CalculateScan`PlotterScanner`Private`x2$$ = 
                    1.0428056573453781`}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3798270$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3798275$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3798276$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$3798277$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$3798278$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$3798279$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$3798280$$, 0], 
                    Hold[$CellContext`sc3$$, $CellContext`sc3$3798281$$, 0], 
                    Hold[$CellContext`sc4$$, $CellContext`sc4$3798282$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$3798283$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$3798284$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$3798285$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$3798286$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$3798287$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`q}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$, $CellContext`sc4$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$, $CellContext`scTF4$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}, {$CellContext`sc4min$$, $CellContext`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]] + (
                    CalculateScan`PlotterScanner`Private`i - 
                    1) (Part[{$CellContext`scCount1$$, \
$CellContext`scCount2$$, $CellContext`scCount3$$, $CellContext`scCount4$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1)^(-1) (Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}, {$CellContext`sc4min$$, $CellContext`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}, {$CellContext`sc4min$$, $CellContext`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$, $CellContext`sc4$$}, 
                    CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$, $CellContext`scColor4$$}, 
                    CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$, $CellContext`scCount4$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1}], {}], {
                    CalculateScan`PlotterScanner`Private`j, 4}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{3, {2, 0, 0}}}, {0, 1, 9, 0, 
                    0}, {{16, 0, 2, 5}, {40, 56, 3, 0, 0, 3, 0, 6}, {16, 6, 3,
                     6}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 7}, {16, 7, 4, 
                    7}, {13, 1, 5, 6, 7, 8}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3798254, \
$CellContext`C$3798255, $CellContext`C$3798256, $CellContext`C$3798257}, \
$CellContext`C$3798254 + $CellContext`q $CellContext`C$3798255 + \
$CellContext`q^2 $CellContext`C$3798256 + $CellContext`q^3 \
$CellContext`C$3798257], Evaluate][$CellContext`q, 
                    Apply[Sequence, {1, 0, 0, -1}]], {$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    0.699676716069345], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    0.699676716069345]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{3, {2, 0, 0}}}, {0, 1, 9, 0, 
                    0}, {{16, 0, 2, 5}, {40, 56, 3, 0, 0, 3, 0, 6}, {16, 6, 3,
                     6}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 7}, {16, 7, 4, 
                    7}, {13, 1, 5, 6, 7, 8}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3798254, \
$CellContext`C$3798255, $CellContext`C$3798256, $CellContext`C$3798257}, \
$CellContext`C$3798254 + $CellContext`q $CellContext`C$3798255 + \
$CellContext`q^2 $CellContext`C$3798256 + $CellContext`q^3 \
$CellContext`C$3798257], Evaluate][$CellContext`q, 
                    Apply[Sequence, {1, 0, 0, -1}]], {$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    0.699676716069345], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    0.699676716069345]}, PlotStyle -> Directive[Black, Thick],
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`q, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{3, {2, 0, 0}}}, {0, 1, 9, 0, 
                    0}, {{16, 0, 2, 5}, {40, 56, 3, 0, 0, 3, 0, 6}, {16, 6, 3,
                     6}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 7}, {16, 7, 4, 
                    7}, {13, 1, 5, 6, 7, 8}, {1}}, 
                    
                    Function[{$CellContext`q, $CellContext`C$3798254, \
$CellContext`C$3798255, $CellContext`C$3798256, $CellContext`C$3798257}, \
$CellContext`C$3798254 + $CellContext`q $CellContext`C$3798255 + \
$CellContext`q^2 $CellContext`C$3798256 + $CellContext`q^3 \
$CellContext`C$3798257], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`q, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    0.699676716069345], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    0.699676716069345]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 
                    C[2] + $CellContext`q^3 C[3], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{Derivative[4][$CellContext`y][$CellContext`q] == 
                    0}], 1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 
                    C[2] + $CellContext`q^3 C[3], {
                    C[0] -> 1, C[1] -> 0, C[2] -> 0, C[3] -> -1}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 
                    C[2] + $CellContext`q^3 C[3], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2], 
                    C[3]}, 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$, $CellContext`sc4$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$, $CellContext`scTF4$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$, $CellContext`scColor4$$}, 
                    CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`q C[1] + $CellContext`q^2 
                    C[2] + $CellContext`q^3 C[3], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2], 
                    C[3]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$, $CellContext`sc4$$}], 
                    CalculateScan`PlotterScanner`Private`j]}], {1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 4}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`q -> $CellContext`q21098]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.2779945066540234, 
                    Subscript[
                    Style["q", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    1.0428056573453781`, 
                    Subscript[
                    Style["q", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{$CellContext`sc3$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{$CellContext`sc4$$, -ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 4], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    8}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    9}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 10}, {{$CellContext`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`sc1min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`sc1max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    14}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 15}, {{$CellContext`scColor2$$, 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`sc2min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{$CellContext`sc2max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    19}, {{$CellContext`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 20}, {{$CellContext`scColor3$$, 
                    RGBColor[
                    0.8562609999999999, 0.742794, 0.31908333333333333`], 
                    " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{$CellContext`sc3min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{$CellContext`sc3max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    23}, {{$CellContext`scCount3$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    24}, {{$CellContext`scTF4$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 4], " family"}]}, {True, False}, 
                    ControlPlacement -> 25}, {{$CellContext`scColor4$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    26}, {{$CellContext`sc4min$$, -ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 4, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    27}, {{$CellContext`sc4max$$, 0, 
                    Subscript[
                    RawBoxes["c"], 4, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    28}, {{$CellContext`scCount4$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 29}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7], 
                    Manipulate`Place[8]}], 
                    Manipulate`Place[9], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[10], " | ", 
                    Manipulate`Place[11]}], 
                    Row[{
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13], "  ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], " | ", 
                    Manipulate`Place[16]}], 
                    Row[{
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18], "  ", 
                    Manipulate`Place[19]}], 
                    Row[{
                    Manipulate`Place[20], " | ", 
                    Manipulate`Place[21]}], 
                    Row[{
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23], "  ", 
                    Manipulate`Place[24]}], 
                    Row[{
                    Manipulate`Place[25], " | ", 
                    Manipulate`Place[26]}], 
                    Row[{
                    Manipulate`Place[27], "  ", 
                    Manipulate`Place[28], "  ", 
                    Manipulate`Place[29]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`q21098, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "q"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxAZifEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPN5+8XJn6/\
mOh8FYRsQYUEJvt4XMp4poSHsIdMWat5yIb/74oDx+KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkPW0LTFSmPTd3Sm7WKciHfx0fyNjF5D0uaXd2B\
IaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDmOrbRgwO7Q1Xq29ZfhnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DQjzuO4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  0.7208244949752529, 0.7368428170858141}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 5, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    0.7208244949752529, 0.7368428170858141}}}}, 
                 Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
                 Typeset`initDone$$ = False, Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4406615$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$4406620$$ = 
                 0, CalculateScan`PlotterScanner`Private`sf$4406621$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`P$$ = {
                    0.7208244949752529, 0.7368428170858141}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4406615$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$4406620$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$4406621$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[ReplaceAll[$CellContext`q, 
                    Solve[
                    1 - $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q + (
                    1 - $CellContext`q) $CellContext`q^2 == #, \
$CellContext`q]]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-1.5217406005033116`, 
                    1.5217406005033116`}, {-1.5217406005033116`, 
                    1.5217406005033116`}}, 1, 2]], 
                    
                    Part[{{-1.5217406005033116`, 
                    1.5217406005033116`}, {-1.5217406005033116`, 
                    1.5217406005033116`}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-1.5217406005033116`, 
                    1.5217406005033116`}, {-1.5217406005033116`, 
                    1.5217406005033116`}}, 2, 2]], 
                    
                    Part[{{-1.5217406005033116`, 
                    1.5217406005033116`}, {-1.5217406005033116`, 
                    1.5217406005033116`}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-1.6018322110561176`, 
                    1.6018322110561176`}, {-1.6018322110561176`, 
                    1.6018322110561176`}}, ImageMargins -> 20, ImageSize -> 
                    240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 5, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8}, 
                    ControlType -> SetterBar, ControlPlacement -> 1}, {{
                    CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    0.7208244949752529, 0.7368428170858141}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMBlT7hgR0MCYNKEn5Xi++NBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlNb+DpsTUjOc9lIei701yB1kyK9Ao+\
u21NDGYPOPkB1PuuW/Neqjkx/vwK3yc8KTgx8NUwzgwDPd1XJM9YomvPWLFj+\
5Mplwnh7Cc8HQ53dnd3hh4GYxkTY0AJ/bItZJ4poiHtIdA1a95yIr7546Py+\
KngPIbvBYgE9APrnShCLYwUhGM+wbdebqbuYmKGCEoUvXCanDxHbS/QRjExm8A8xzfOJ+\
t5W2CiZtpzc6/kZpOCfPg38YGMXUze45J2Z0dgWBiXjL6zsvrn3A3w/LotvJIn64nD/\
N5w5I0Ydgx6lc5nrevkGam61kW/4Oqi5stWgzx/ytT/S4dMm9UwXrQNA+ZHtsbrtbcKP2wLL3Ps+\
oW471vz2TtKwHXDoRLcR0kLvoiimfLAS7R9ujq3Do9xp+\
I7RmdIBSucyMZZ9ovrj4cVeL0pxFi76RakI+\
oZEEEO1kUdt3tsxswoI4okFnhxXb9ssomsQwm4s33tmaDMDjBPyKblCc1BulR3YpLsyx8Vt5LLmSZD\
3g+EgRmojaK/hfVRllxBJzIwkhgvaOo1mMMqqTFRwbIflCBxTgRDSPbLftw3/3C5EkjVvkJ1Kc/\
iwJXmNDyJflngQxAzkzV37MDRFdy2mE0kT2rVRSxNl6fN9pjuN5lu3NAc6KEkhJYkfKB3m0K3KfzVT\
WFlD+7WhG5N6NaEbk3o1oT/d01wEeO/0m93Nrhe"]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "13", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.449", "parsetiming" -> 
    "0.47100000000000003", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP34271898adi7ae2f04fg00001g7447ehhh2if2fi", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa34281898adi7ae2f04fg00004d75bc3ge0175iie4222294402565530544", "version" -> 
    "2.6", "inputstring" -> "1 - q + (1 - q) q + (1 - q) q^2"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 12, 10, 12, 25, 54.4350761`9.48845367627182}, "Line" -> 
    109, "SessionID" -> 26935065509461206242}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "1 - q + (1 - q) q + (1 - q) q^2"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{490., {1690.3544921875, 1695.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.879681954481947*^9},ExpressionUUID->"94d2136b-a7c9-4e74-87fa-\
bf499549188e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"y", "\[Function]", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          RowBox[{
           FractionBox["1", "2"], 
           RowBox[{"(", 
            RowBox[{"2", "-", "y"}], ")"}]}], 
          RowBox[{"0", "<=", "y", "<=", "2"}]},
         {"0", 
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"0", "<=", "y", "<=", "2"}], ")"}]}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True]}]}]], "Input",
 CellChangeTimes->{{3.879683710910487*^9, 3.8796837557723465`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"9c0c58df-c905-407b-8ca3-403ea288fd2f"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"y", ",", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          FractionBox[
           RowBox[{"2", "-", "y"}], "2"], 
          RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}]},
         {"0", 
          RowBox[{"!", 
           RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}]}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}},
        Selectable->True]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True]}], "]"}]], "Output",
 CellChangeTimes->{3.8796837563817163`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"4302af87-9df4-4d85-bc11-5e1d90367014"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     FractionBox[
      RowBox[{"-", "1"}], "10"], ",", 
     RowBox[{"2", "+", 
      FractionBox["1", "10"]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796837593019514`*^9, 3.8796837764598093`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"a49e769a-e769-402c-b116-c0621ac48e05"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAWIQPe3o4RszZu7czwAFV+I51yXkIviCv/yaNRwR/B69
W7o7XuyA8xunf2i6bo7g52TK6opd2wbnO/KWN04W2gLn31wZEiIjvhbODzr9
c4719jVw/pk3855GhSP4B/Rfls2cvhrOX7a1dqaYxCo4v+jgsnsCksvhfO6b
PzJYpRfC+S2/5m5U2b0Azv8n7fzLORrBf7xXSpzVfD6cv+Gkc8x/8zlwvufD
qc8+W06D821UHpQbVU2F8w3StTgLd02B88Xe7tN+ZzUZzn/043nBC+sJcP53
hZJvO6tb4Pzf19bZLRRthvP/97xs61jfCOfzf9qrt+5YLZwvEWe8v+ZXFZyv
cGqFv7deBcI9iyYXvJhaBOcXyAgx5U3Oh/MbvvxR4v6dCedPOPPceUVSCpzv
5Ln0ZNeUWDg/6WcV99HkIDj/847NLXf/uMH5ANqdoR0=
       "]], LineBox[CompressedData["
1:eJwtlHs01GkYx11aki4WUXZrrVq1bjklUqsvo7WtJEWK5JZdt0KFHPf7Id2Z
dYuoodalCyaplimR0WwTReNuaCYG/RiDcRv72z37x3Pe8zmf73me5/3n+d4z
8MhvMlJSUq5k/ftOPqlM7FmwQqrvIS/NRQLfWhmMHXZzRkBVoq7PLAGJdVmb
YpMnun5cO5c7TaAnpz29RXwGlarGmbITBGzz1qYY6IfjlOBCSyuPQPLGnTIn
f0lBPXX+57NsAvE+czUh5anYpnhJtYhFILqi7uwVlTTkxn47yGESCLGy5tb1
XcZ5f7NY81cEtldvc//6+XVssoh5uqaGgFbfPgQ7ZCJhVGbb/dsE4jKrJTcp
hdhnuWLdSAgBuyGnmx45hag13DCpd56ApumCqbawECYbDd8GBBFgdJqHPCi8
DZ3Zo4lCP/I/G5pHXkjRoPSgcHzWjUAkrZvDry1Gt4Ypc7k1gbBH0pWGe8oQ
LPQO195I4AmvaMdAdiVohQ3dHo1f8MGtYnN8bB1kO6t6ZuS/IK7MKnjoYAOC
dC5MUBzHoONEFVGPvEGXwxmLcuooAqdmTah570CLl67I4Yxgda+LjqLbe0Q2
+ew02zqCx67justc2nFkSHZK4iOAVozJwFbtDuzSPPc65PEwVG/IqVkMdCHi
RPTTQPlhrDGTc+ru6MXzoNrhlF+HMFTvcu8wux8r81t0j2V9hg39bWnooQE4
F60r2cfhY/LWsgBq0yDkHi7up3/DR5RzxgrrrTy8bKXPdfrzoOjx3IBRxEc4
u3Dou/JPiDDZq89SGALlk/vw+vlBjDsdr8xOG8by9/baO3YP4l6IsdhdbgR6
DZ8S2JEDoHgEqNd6j8KNvV+kyeKCm7W3tps/hmuV/QXXV3LhWeCD6zYE2A8O
uFc79SPdrrTu1tFxdLr+Gctw6IM4NODOR5UJKClvqrHj9MA2yTXYuWECXlMU
9QMh3Siu0VCoTRKi6lLzWIKoEwWCXVH5lEkwdK58VR/egTTZxF6mcBIC8Qzl
tAYHYZRc2fZHIihFMMX2N9vh6Nu3Vt9rCg76Fh+KTNrQfilJXlplGg580fhi
x3scb595Tn83DTt7peQM11a8kc90o8fNwG+8xZy68A7mbjKNVAsxpBKmP9+b
fYvi/Jz1L0Ri+CRRs+f1WLjfmWHjS5vFfmrZ384BTDz56YSl0HMOmqvShcbB
jahMtt3SqDoPI16D5+eyejycXsUOb5uH+Q9N9aolDBw6tc2x7MYCUniJtnl+
z9BXHdW81XIRyy2Uy2r4dJzdniWTLCPBOCey/dbHBxBl9G0xoEvAeCgXv6Gc
hqDdwmeCagmknLrNHeJoGOtbZnf3qQSG0hVLF4/SwNfRCdNkSFBw+GSUePEO
OIzgJuU3EsQKK8Pe297BX6MKvjP9ZN7IIzB1vBDJ+4xKGCuXYB54oUbgnQ8Z
gdXeqDVLYNRpmRxXykfMVadWU+UlaCq9rWp4koewzui5CvUlSD3a/LBAIQ/+
QUzrIq0lFAhbih1Lc2F303UkdRfpQ/UyXn7JwnpRip691xL6I7kBOSHpMGgu
sTzgTc57WnwxUy0dlAKWs6UfOW/Gvzij+gZO2yil7ghaQuy56Z4rs9dRS8vk
qUSSeR/FgwlR1+B5tDj/Qzrp7/o5clakIVS3ic76g2StqcutNheRJi1gvcom
83kxDawrqagq15+vukXuk55h9EI5BfJy9GPUUtJH1yqXaCSh7HG9kmM96Us2
5884RINxibfFtpHkAtNVo5xItHnKw4pJ9qfaRva7RECy+sAZYzbp48KcmV5h
OOzdylTrIv0xllpu8Dn8bibqX91L+oPcpKviIISrqInluCQnjw7LzwaAVuek
PcMn2cW8uGO5L6bVufEfhSSrvjObs3OG4heZHPYUyYJNc2/cHaD5avOj12KS
Y4nTe7g2MMqxaqqbJ9kwk9crZfH/HSf5v7tujH8ASIUGtA==
       "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQbeN942w+I4MDAxRY8l1jC2FC8F1+pgldYEbw/Z58
l/VhRfAjzndonmBD8JN2SZq6cCD45ROsfWy4EfwFNvVVOoIIflXjK+l+IQQ/
5Fjo3o/CCD5ngA7DdjEEvyj5ZqujDILv3GU8MUwdwX92/fnyBlsEX6c44OqV
TAT/hqfY1oRsBL9F4c6UNzkI/p2z6SEsBQh+j0b9ZeMyBP/N3bUXJzUh+Gs8
uM8FzEYKD/mLa+/MQfBZvk3rzZiH4McsVvJtWIjg8/yzPLN+OYKfsznjFN8W
BF+iS2/VrK0I/pGEL51q2xF8Gb4GT7tdCP6ZjOkncg8g+BX2sSt+HkTwVcSU
O1oPI/g1h9e5zz2G4GvMKlHXPIHgXymwYt96EsFvcGd47nAawdeVO3bszBkE
HwC1EnJN
       "]]},
     Annotation[#, "Charting`Private`Tag$158759#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{
      Rational[-1, 10], 
      Rational[21, 10]}, {0., 0.9996492346938776}}, {{-0.1, 2.1}, {0., 
    0.9996492346938776}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8796837770066776`*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"510e76fa-1cbf-4a7e-a48a-1e8516966c2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}], ",", 
     RowBox[{"2", "+", 
      FractionBox["1", "10"]}]}], "}"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Classic\>\""}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[116]:=",ExpressionUUID->"0180e673-201e-415b-aa7e-9e3be59c5b22"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.24720000000000014`, 0.24, 0.6], AbsoluteThickness[1], 
      Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAWIQPe3o4RszZu7czwAFV+I51yXkIviCv/yaNRwR/B69
W7o7XuyA8xunf2i6bo7g52TK6opd2wbnO/KWN04W2gLn31wZEiIjvhbODzr9
c4719jVw/pk3855GhSP4B/Rfls2cvhrOX7a1dqaYxCo4v+jgsnsCksvhfO6b
PzJYpRfC+S2/5m5U2b0Azv8n7fzLORrBf7xXSpzVfD6cv+Gkc8x/8zlwvufD
qc8+W06D821UHpQbVU2F8w3StTgLd02B88Xe7tN+ZzUZzn/043nBC+sJcP53
hZJvO6tb4Pzf19bZLRRthvP/97xs61jfCOfzf9qrt+5YLZwvEWe8v+ZXFZyv
cGqFv7deBcI9iyYXvJhaBOcXyAgx5U3Oh/MbvvxR4v6dCedPOPPceUVSCpzv
5Ln0ZNeUWDg/6WcV99HkIDj/847NLXf/uMH5ANqdoR0=
       "]], LineBox[CompressedData["
1:eJwtlHs01GkYx11aki4WUXZrrVq1bjklUqsvo7WtJEWK5JZdt0KFHPf7Id2Z
dYuoodalCyaplimR0WwTReNuaCYG/RiDcRv72z37x3Pe8zmf73me5/3n+d4z
8MhvMlJSUq5k/ftOPqlM7FmwQqrvIS/NRQLfWhmMHXZzRkBVoq7PLAGJdVmb
YpMnun5cO5c7TaAnpz29RXwGlarGmbITBGzz1qYY6IfjlOBCSyuPQPLGnTIn
f0lBPXX+57NsAvE+czUh5anYpnhJtYhFILqi7uwVlTTkxn47yGESCLGy5tb1
XcZ5f7NY81cEtldvc//6+XVssoh5uqaGgFbfPgQ7ZCJhVGbb/dsE4jKrJTcp
hdhnuWLdSAgBuyGnmx45hag13DCpd56ApumCqbawECYbDd8GBBFgdJqHPCi8
DZ3Zo4lCP/I/G5pHXkjRoPSgcHzWjUAkrZvDry1Gt4Ypc7k1gbBH0pWGe8oQ
LPQO195I4AmvaMdAdiVohQ3dHo1f8MGtYnN8bB1kO6t6ZuS/IK7MKnjoYAOC
dC5MUBzHoONEFVGPvEGXwxmLcuooAqdmTah570CLl67I4Yxgda+LjqLbe0Q2
+ew02zqCx67justc2nFkSHZK4iOAVozJwFbtDuzSPPc65PEwVG/IqVkMdCHi
RPTTQPlhrDGTc+ru6MXzoNrhlF+HMFTvcu8wux8r81t0j2V9hg39bWnooQE4
F60r2cfhY/LWsgBq0yDkHi7up3/DR5RzxgrrrTy8bKXPdfrzoOjx3IBRxEc4
u3Dou/JPiDDZq89SGALlk/vw+vlBjDsdr8xOG8by9/baO3YP4l6IsdhdbgR6
DZ8S2JEDoHgEqNd6j8KNvV+kyeKCm7W3tps/hmuV/QXXV3LhWeCD6zYE2A8O
uFc79SPdrrTu1tFxdLr+Gctw6IM4NODOR5UJKClvqrHj9MA2yTXYuWECXlMU
9QMh3Siu0VCoTRKi6lLzWIKoEwWCXVH5lEkwdK58VR/egTTZxF6mcBIC8Qzl
tAYHYZRc2fZHIihFMMX2N9vh6Nu3Vt9rCg76Fh+KTNrQfilJXlplGg580fhi
x3scb595Tn83DTt7peQM11a8kc90o8fNwG+8xZy68A7mbjKNVAsxpBKmP9+b
fYvi/Jz1L0Ri+CRRs+f1WLjfmWHjS5vFfmrZ384BTDz56YSl0HMOmqvShcbB
jahMtt3SqDoPI16D5+eyejycXsUOb5uH+Q9N9aolDBw6tc2x7MYCUniJtnl+
z9BXHdW81XIRyy2Uy2r4dJzdniWTLCPBOCey/dbHBxBl9G0xoEvAeCgXv6Gc
hqDdwmeCagmknLrNHeJoGOtbZnf3qQSG0hVLF4/SwNfRCdNkSFBw+GSUePEO
OIzgJuU3EsQKK8Pe297BX6MKvjP9ZN7IIzB1vBDJ+4xKGCuXYB54oUbgnQ8Z
gdXeqDVLYNRpmRxXykfMVadWU+UlaCq9rWp4koewzui5CvUlSD3a/LBAIQ/+
QUzrIq0lFAhbih1Lc2F303UkdRfpQ/UyXn7JwnpRip691xL6I7kBOSHpMGgu
sTzgTc57WnwxUy0dlAKWs6UfOW/Gvzij+gZO2yil7ghaQuy56Z4rs9dRS8vk
qUSSeR/FgwlR1+B5tDj/Qzrp7/o5clakIVS3ic76g2StqcutNheRJi1gvcom
83kxDawrqagq15+vukXuk55h9EI5BfJy9GPUUtJH1yqXaCSh7HG9kmM96Us2
5884RINxibfFtpHkAtNVo5xItHnKw4pJ9qfaRva7RECy+sAZYzbp48KcmV5h
OOzdylTrIv0xllpu8Dn8bibqX91L+oPcpKviIISrqInluCQnjw7LzwaAVuek
PcMn2cW8uGO5L6bVufEfhSSrvjObs3OG4heZHPYUyYJNc2/cHaD5avOj12KS
Y4nTe7g2MMqxaqqbJ9kwk9crZfH/HSf5v7tujH8ASIUGtA==
       "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQbeN942w+I4MDAxRY8l1jC2FC8F1+pgldYEbw/Z58
l/VhRfAjzndonmBD8JN2SZq6cCD45ROsfWy4EfwFNvVVOoIIflXjK+l+IQQ/
5Fjo3o/CCD5ngA7DdjEEvyj5ZqujDILv3GU8MUwdwX92/fnyBlsEX6c44OqV
TAT/hqfY1oRsBL9F4c6UNzkI/p2z6SEsBQh+j0b9ZeMyBP/N3bUXJzUh+Gs8
uM8FzEYKD/mLa+/MQfBZvk3rzZiH4McsVvJtWIjg8/yzPLN+OYKfsznjFN8W
BF+iS2/VrK0I/pGEL51q2xF8Gb4GT7tdCP6ZjOkncg8g+BX2sSt+HkTwVcSU
O1oPI/g1h9e5zz2G4GvMKlHXPIHgXymwYt96EsFvcGd47nAawdeVO3bszBkE
HwC1EnJN
       "]]},
     Annotation[#, "Charting`Private`Tag$165297#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  BaseStyle->Automatic,
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  FrameTicksStyle->GrayLevel[0],
  GridLines->{None, None},
  GridLinesStyle->Automatic,
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "PointSizeFunction" -> None, "ScalingFunctions" -> 
    None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{
      Rational[-1, 10], 
      Rational[21, 10]}, {0., 0.9996492346938776}}, {{-0.1, 2.1}, {0., 
    0.9996492346938776}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic},
  TicksStyle->GrayLevel[0]]], "Output",
 CellChangeTimes->{3.8796841525177374`*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"b92d6c6b-716e-44b4-a848-224b97328046"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"F", "=", 
  RowBox[{"y", "\[Function]", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          RowBox[{"y", "-", 
           FractionBox[
            SuperscriptBox["y", "2"], "4"]}], 
          RowBox[{"0", "<=", "y", "<=", "2"}]},
         {"0", 
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"0", "<=", "y", "<=", "2"}], ")"}]}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True]}]}]], "Input",
 CellChangeTimes->{{3.8796838182415514`*^9, 3.8796838523512115`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"95bdf486-f88f-47d1-9328-f137be71cf37"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"y", ",", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          RowBox[{"y", "-", 
           FractionBox[
            SuperscriptBox["y", "2"], "4"]}], 
          RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}]},
         {"0", 
          RowBox[{"!", 
           RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}]}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}},
        Selectable->True]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True]}], "]"}]], "Output",
 CellChangeTimes->{3.8796838527212563`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"27b85278-2e78-4c0a-b685-f44459682216"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"F", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     FractionBox[
      RowBox[{"-", "1"}], "10"], ",", 
     RowBox[{"2", "+", 
      FractionBox["1", "10"]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796837593019514`*^9, 3.8796838040147266`*^9}, {
  3.8796838613212156`*^9, 3.8796838657212105`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"4d1a03e2-a6f1-4835-93a8-4057be4ce521"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[{{-0.09999995510204082, 0.}, {-0.09932522057476884, 
       0.}, {-0.09865048604749684, 0.}, {-0.09730101699295285, 
       0.}, {-0.09460207888386486, 0.}, {-0.0892042026656889, 
       0.}, {-0.07840845022933697, 0.}, {-0.056816945356633126`, 
       0.}, {-0.010001614411990973`, 0.}, {-0.009318599439079636, 
       0.}, {-0.008635584466168298, 0.}, {-0.007269554520345624, 
       0.}, {-0.004537494628700275, 0.}, {-0.003854479655788938, 
       0.}, {-0.0031714646828776005`, 0.}, {-0.001805434737054926, 
       0.}, {-0.0011224197641435886`, 0.}, {-0.000701530612244898, 0.}}], 
      LineBox[CompressedData["
1:eJwV0nk4lWkYBnBkKaYyThKVZFyUiaS0UO4sw6SSSkJFtGmzJEK7MAymUUSS
siZLyVKUqETEJIqMfcl20FcHOTnnfO+888d7vdfvn+d6lnuxq8eOQxJiYmIp
9P3/jxXlB7ULLTCj982WRoEFWKvsRrkqVzw2yHewqnBFe3zT9Xr+ScQv1f9W
++0krG8rhurqBCA8wCXPXz0AIaoGEvssQ1EkHbH726pQBLpNFfvkhAEGFVKt
cWG4kFfm9RcnHC0LTxxKE/4JHwur7rLOSFgtnLaurTwS+k+W7/+5JAqR3Mx5
RzOioN5pjtO2sVgzxzLfQz8Wl2OfsAmmSQiIbShyXpgEm0GHBJf4JBSUWbek
eSdBbZ1wnSYvCUedhD6fq5PwomWjz8OkZPxGhudv9k0Gu/Dt8EuxVJS8W6Be
+i4F51LbmvtL0/E49bWS0YV0+D0Sz9czykb9Mp2Mvz9loagvbWXPzXy8b8rV
bVyXj4/OeRqBl8qwoK1T/VhoKS5nW5we3FqBxH2Df/CPvYa2Q8x4zI4aJOyK
qd/RXg2PiR9rYm6/B1fLcPE0Th1mdezVlnP+gEta1WtrB+rx2Onrr5J7m2Du
dsBFwe0j1C+u6Vmi+S8c+R0GD3OaMOea9FyTnlb4lx06WNbcjNkbpB3a/u2A
7Iq2LRz1VgyW783YXteF3vahAcdV7dhS+C7Ld1sPvvM0Rj+5dGLsjqR7TFUv
AknB83fFXTjvGC1rtaQPn4wy5aXud0POpUT3RVo/ymIUzjEpPTi7xlindsYg
7jVatamG9OKrg33+zfAh6JWXufmf+owMn9X8/dLDePJCtfTh9j6YurgrlR4Z
wTmOZrO0Sj+644xL2/pHEd1qsusutx+ud90QtYVB9scopa1pA7huk1V2Z9dX
mMf0pjy1HQTf1z3lE+cbhHv9WiNlh2Ad7HTaseIbJtT2Z5plDyG9WGVGaTAP
2kt6t33awcVd7trziaZjcHo+OOfGKBfh04I6qnljqFwfwfvZdxh+premNT0a
x6z1MQZB4iOwO9qpqHNwAiFO4ofSzo6gKSJYRpzzHeOXAvY0Do/AvmmypPD9
d0hpB+xW2zeKGplY58LLk1i30d1ssHQUG50lKmNM+DCuqDtjrvYF6Ynxyi/H
+TiV4P+HvPcXPGiJ3nI09QdSMhvtk0q+oGj9HjOe6xTuRBj1D05jkB9irVU5
RwBbl1oPT2MGp4JGf1QpCbC+yFxtHxjoB0bU1qgIIBudg00bGeSdf+tVrybA
zhabmkWm1KctStqWCRCf1K5Y+Ru1q/H2MXMBJObL+03SveYZ655V8xFgTXGz
56gjg9zvM+sCGgXQSeGv1PRh4HpOO8ajWYCX3k+nuNSKEpZ7DrYKYKicafDQ
l0HAzEsDW7sFaOpRmL7aj4G5Bo+ojQpQ7Cm7aMNZBs3bm/TeSAqhcyZKccVl
BmI5idc4q4Ro0CUauREMth1Ybpd9TQjJTQ7/yCYzSE4Q+909Roj3UcEVSdTj
jfXr9OKE0L0gbb42hUHc76cXFtwWIt1E+uOBVAbdOsWfn2UIcdFbhMJ0Bt58
U++aUiGaAt9ammQxiI20+5vLFULBpnMum8+AW6kVmD0qxGa5u/8GFzBYL/bD
2/2rEErHCtVnFjLoOnVrN29CiGMKHZYqjxkste9SnRIT4cdMrQ7dIgbP1I/l
zFAS4WlurKFJCYPOJ+ffLjEToTZ1LE/2NYO3i52gaSFCcL7TwUjqgnDjgl82
iRAd8jxkdgWDUGdyW3WbCE/87VQVKun9ZC57zdkjwszoiTj5KgZBdkHzxOgs
/LjBZ7waBksm/jz8KVmE+t6kos0fGCg4H2/9mCbC/vPBoSXUwqrNNg0ZIvzW
urd62UcG9Qk/Gf7zQATO5/7bco30PuZ/zSx/KkLZUrdrr5oY1F6PKnjQIIJ9
8KL7ii0MvPTjJEIkWESed4m06aL1tumk2EixKPA7on+fOuTkK7P501lcW1Hm
KN7NID5jJCh3JoszbQcMcqlfqZrItM5j0T43UGF6L+1Pjiunt5zFIlWFE3f7
aL56jRRb9rDw972U4M2l+xavL0x1YnFzSWlWCXWl6mE7DxcWnnFbjaWGGbQ4
/B0reYSF5SOX0WhqifeflZefYhH1xsn7wQiDnSWRqkGhLG6FZKu+/ULzEd2p
pVvIItj6Bi+Fx8DTkPeM+4RFTTm7uY16tFPS5t5TFvax13XmjDHo19b2U3vB
wtTBNCyQuvnF6SqFGhYuvxckO4wzeD4y4+hkF4vyD0P7vk0wMLy2QJTfy+K4
zjxD9e8MHq9ZHuXZz8Kh71TiDurcQNvioWEW0p455BF18rw7M9q+s8j6ulrj
+CTdn/mqzBc/Ecy7c2uikk/n4VoYn59NoN5+1fYr9cWrDg3rFAi8/HONlH8w
8Gu5MJWnRNBd65t8lPq4Z7VVmjrBT51KDZJTDGwSnIbD1hIE52YVawjoPU28
LloYETANh25ZUG8auMKZZkxwd+cWKTdqU/37RufMCD54JHrdp15VNRbubk1w
hbM7W1PIQHk8dNnOgwTTp6tkyooY6L7NNNt8hMBdTtpSi9r0bq2j2TECDf8+
OzPqE1vkw1Z6Ely+fqHOn7o0NbaPc45AWK6s0UXdEFAslLtI0KucZM+nHrBp
5UgGEqi0zBeTZxnIi1RNx/8g8L85fG8Dteuu9MSP1wkmOeOO16h9f60qrL1B
4FwyVyudOlycW/v6JoFS3bLDxdQFOTqCgjsEfitXbuigrr6yTSEnmUAt+JdG
hrrDwWtpWhqBsolMlxhhICNduDsmi2BqMsN6MfWCtib3yAe0P97hPD1qvTx+
cPAjggX288JA7ei0vsDnCcEFl11X91C7r3KqOfmU4J5Ud6kb9RXZSz2HnhMs
nrPfxYc6+3G5vF05gaTnWhJB/SKiT8u6kuDk86ipWOpGVxlYVBNo+XS4JVNz
1y61M64lWBGrapVNzc7afHJ1HUH4LzsSC6k5fSeCdBsIVqv4HyqlXvLsr1ua
jQR6Z6/fqaTefqShem4rgeK55BON1Ic3jHfN6iAg82NJK3UAZy5fupvAUPOi
VA/11aE1s0kvQUW844UB6tQyB83JfpoP/6XHRqiLYs5uYIYIal4NV32l/uf4
bduBEQIL36T4ceoek7LjnQyBQrRV5yT1d6XuwE88Ap0FAzemqOW+SMTXTRDc
nHXmpZBa7bXGozd8AtvjU04s9ap4i6oyAcF+fS8PQh12dNtBNRGBnBTv+f/+
Dw6zbdk=
       "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQbeN942w+I4MDAxRY8l1jC2FC8F1+pgldYEbw/Z58
l/VhRfAjzndonmBD8JN2SZq6cCD45ROsfWy4EfwFNvVVOoIIflXjK+l+IQQ/
5Fjo3o/CCD5ngA7DdjEEvyj5ZqujDILv3GU8MUwdwX92/fnyBlsEX6c44OqV
TAT/hqfY1oRsBL9F4c6UNzkI/p2z6SEsBQh+j0b9ZeMyBP/N3bUXJzUh+Gs8
uM8FzEYKD/mLa+/MQfBZvk3rzZiH4McsVvJtWIjg8/yzPLN+OYKfsznjFN8W
BF+iS2/VrK0I/pGEL51q2xF8Gb4GT7tdCP6ZjOkncg8g+BX2sSt+HkTwVcSU
O1oPI/g1h9e5zz2G4GvMKlHXPIHgXymwYt96EsFvcGd47nAawdeVO3bszBkE
HwC1EnJN
       "]]},
     Annotation[#, "Charting`Private`Tag$161681#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{
      Rational[-1, 10], 
      Rational[21, 10]}, {0., 0.9999998769637001}}, {{-0.1, 2.1}, {0., 
    0.9999998769637001}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.87968380609581*^9, 3.87968386613921*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"168bd351-9165-490e-8ea8-bd944fc43702"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "[", "2", "]"}], "-", 
  RowBox[{"F", "[", "1", "]"}]}]], "Input",
 CellChangeTimes->{{3.8796840174447575`*^9, 3.879684020202403*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"24d30b18-d75f-44e7-af5e-aac09a440f26"],

Cell[BoxData[
 FractionBox["1", "4"]], "Output",
 CellChangeTimes->{3.8796840207179966`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"3365c152-acba-4e0a-ae20-61310e861afc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.8796842452469645`*^9, 3.8796842467781754`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"41eee40c-3251-40e8-9d64-fd54423eff09"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.879684247215727*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"2bd43658-79d0-4a8d-8daf-5ba2b628a8ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8796842479500513`*^9, 3.8796842493875837`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"61f23cbd-cb19-4bdd-951a-1799a987e0c8"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.8796842499031744`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"0a7fae05-f93c-43cd-9f8e-df52b4146951"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"(", 
     RowBox[{"t", " ", "x"}], ")"}]], 
   RowBox[{"f", "[", "x", "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.8796846552564297`*^9, 3.8796846920872684`*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"a4daf354-cd96-4328-9490-282011ece714"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "t"}]], "-", 
   RowBox[{"2", " ", "t"}]}], 
  RowBox[{"2", " ", 
   SuperscriptBox["t", "2"]}]]], "Output",
 CellChangeTimes->{3.879684692884142*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"1319b112-b8ff-4e24-8d0c-31ccf70e42be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubsuperscriptBox["\[Integral]", 
    RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"(", 
      RowBox[{"t", " ", "x"}], ")"}]], 
    RowBox[{"f", "[", "x", "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8796846552564297`*^9, 3.8796846920872684`*^9}, {
  3.8796849183186116`*^9, 3.879684943808419*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"45d3b1c3-f873-4682-a271-f9def3b97d96"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    RowBox[{"-", 
     RowBox[{"2", " ", "t"}]}], "+", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", " ", "t"}]], "-", "1"}], 
   RowBox[{"2", " ", 
    SuperscriptBox["t", "2"]}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.8796849198954515`*^9},
 CellLabel->
  "Out[120]//TraditionalForm=",ExpressionUUID->"6f9f0750-13a1-4d3e-ba02-\
8481ee8dc57b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"t", "\[Function]", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"(", 
       RowBox[{"t", " ", "x"}], ")"}]], 
     RowBox[{"f", "[", "x", "]"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.8796849472927876`*^9, 3.879684964105756*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"f0a9d39b-d33d-4e7c-becb-5f4d601de96f"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"t", ",", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"t", " ", "x"}]], " ", 
      RowBox[{"f", "[", "x", "]"}]}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.87968496494951*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"9c5ab3c7-9ae3-46ff-8201-6d1d508d3e51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "'"}], "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.879684940807849*^9, 3.8796849721047516`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"2b5421f4-a287-4903-96aa-804fbcdcaeca"],

Cell[BoxData[
 FractionBox["2", "3"]], "Output",
 CellChangeTimes->{3.879684972417269*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"be41e69c-5895-44ad-ba39-38ac3b8ddc79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.8796849741204023`*^9, 3.879684975636018*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"74191111-158f-4a3a-88ac-52df8d2e3d6e"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "t"}]], "-", 
   RowBox[{"2", " ", "t"}]}], 
  RowBox[{"2", " ", 
   SuperscriptBox["t", "2"]}]]], "Output",
 CellChangeTimes->{3.879684976011013*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"00e87e3f-51f2-4bf9-bc85-7472cf22d395"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "'"}], "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.8796849741204023`*^9, 3.8796849793332367`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"9793d620-c384-4d74-b271-735a17171cd1"],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "-", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "t"}]], "+", "t", "+", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", " ", "t"}]], " ", "t"}]}], 
  SuperscriptBox["t", "3"]]], "Output",
 CellChangeTimes->{3.879684979848851*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"687e5c45-4778-4c1d-a996-c4bbfe36f026"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "''"}], "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.879685030698388*^9, 3.8796850322140207`*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"bf6b1eea-ad63-4b92-8cd2-4a449c52fecb"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", "3"}], "+", 
   RowBox[{"3", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", " ", "t"}]]}], "-", 
   RowBox[{"2", " ", "t"}], "-", 
   RowBox[{"4", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", " ", "t"}]], " ", "t"}], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", " ", "t"}]], " ", 
    SuperscriptBox["t", "2"]}]}], 
  SuperscriptBox["t", "4"]]], "Output",
 CellChangeTimes->{3.8796850329952493`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"213bdee1-7628-4634-9e69-a9c6cb475d51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "''"}], "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.879685030698388*^9, 3.8796850322140207`*^9}, {
  3.8796851298487988`*^9, 3.879685132113375*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"bcac4e12-8797-45d2-bf41-914dcbe304d8"],

Cell[BoxData[
 FractionBox["2", "3"]], "Output",
 CellChangeTimes->{3.879685132425906*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"9d7bef36-20ae-4f30-beb3-95fbb94c6b61"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"m", "''"}], "[", "0", "]"}], "-", 
  RowBox[{
   RowBox[{"m", "'"}], "[", "0", "]"}]}]], "Input",
 CellChangeTimes->{{3.8796854046403074`*^9, 3.8796854097965593`*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"33c6066a-1d66-4775-9245-1bf2e4c4f0c9"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8796854103122025`*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"4cf116e6-0622-4726-a671-73eef4263cf0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"m", "''"}], "[", "0", "]"}], "-", 
  SuperscriptBox[
   RowBox[{
    RowBox[{"m", "'"}], "[", "0", "]"}], "2"]}]], "Input",
 CellChangeTimes->{{3.8796854046403074`*^9, 3.8796854125543947`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"15b8fca2-8432-416c-b751-8379a2059d41"],

Cell[BoxData[
 FractionBox["2", "9"]], "Output",
 CellChangeTimes->{3.8796854130543613`*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"452d5a66-58cb-4877-8f84-e17a54faa56b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.51", "Section",
 CellChangeTimes->{{3.8796855219411507`*^9, 
  3.879685522644287*^9}},ExpressionUUID->"1bf4fe47-7079-4ca5-8414-\
acd6712ec27a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cycleTimeDistribution", "=", 
  RowBox[{"QuantityDistribution", "[", 
   RowBox[{
    RowBox[{"UniformDistribution", "[", 
     RowBox[{"{", 
      RowBox[{"50", ",", "70"}], "}"}], "]"}], ",", "\"\<Minutes\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.87968553074631*^9, 3.8796855520129504`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"a8b8fcb6-26c7-4b4d-abf9-c138e612c6d6"],

Cell[BoxData[
 RowBox[{"QuantityDistribution", "[", 
  RowBox[{
   RowBox[{"UniformDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"50", ",", "70"}], "}"}], "]"}], ",", 
   InterpretationBox[
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"min\"", "minutes", 
      "\"Minutes\""},
     "Quantity"],
    "Minutes"]}], "]"}]], "Output",
 CellChangeTimes->{3.8796855525731363`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"990ec3c1-dd86-43af-af55-8d79ffa282ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"c", ">", 
     TemplateBox[{"65", "\"min\"", "minutes", "\"Minutes\""},
      "Quantity"]}], "\[Conditioned]", 
    RowBox[{"c", ">", 
     TemplateBox[{"55", "\"min\"", "minutes", "\"Minutes\""},
      "Quantity"]}]}], ",", 
   RowBox[{"c", "\[Distributed]", "cycleTimeDistribution"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879685553932517*^9, 3.8796855909112697`*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"eae1949c-1c0e-401f-bf9d-b3422bfd9167"],

Cell[BoxData[
 FractionBox["1", "3"]], "Output",
 CellChangeTimes->{3.8796855912081814`*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"939cea65-b617-414e-963a-1d8b245fe507"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "cycleTimeDistribution", "]"}]], "Input",
 CellChangeTimes->{{3.8796857216135216`*^9, 3.879685724847911*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"8f3f0769-dc14-4926-9621-a5ebbc5ec6cc"],

Cell[BoxData[
 TemplateBox[{"60", "\"min\"", "minutes", "\"Minutes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8796857252072716`*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"a2d82f4b-cb09-4e2b-b233-3ca02caea8b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expectation", "[", 
  RowBox[{"c", ",", 
   RowBox[{"c", "\[Distributed]", "cycleTimeDistribution"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796857259260263`*^9, 3.879685732681672*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"e8c96aa5-243e-4213-ba42-de5e0efa8bf4"],

Cell[BoxData[
 TemplateBox[{"60", "\"min\"", "minutes", "\"Minutes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.879685733041027*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"a0a0f635-744a-4e55-85d2-b55dc3f2dd8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Variance", "[", "cycleTimeDistribution", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Variance", "[", "cycleTimeDistribution", "]"}], "//", 
  "N"}]}], "Input",
 CellChangeTimes->{{3.8796857581264343`*^9, 3.879685777797971*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"20c96181-b750-4d10-a45b-157cb3517207"],

Cell[BoxData[
 TemplateBox[{
   FractionBox["100", "3"], 
   RowBox[{
     SuperscriptBox["\"min\"", "2"]}], "minutes squared", 
   SuperscriptBox["\"Minutes\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.8796857615683327`*^9, 3.8796857781729884`*^9}},
 CellLabel->
  "Out[146]=",ExpressionUUID->"53f987b9-3e5d-45ed-9b84-3cf20f2eaf67"],

Cell[BoxData[
 TemplateBox[{"33.333333333333336`", 
   RowBox[{
     SuperscriptBox["\"min\"", "2"]}], "minutes squared", 
   SuperscriptBox["\"Minutes\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.8796857615683327`*^9, 3.8796857786378655`*^9}},
 CellLabel->
  "Out[147]=",ExpressionUUID->"ba5f3a01-5bbd-4c99-a035-8a68a6390f14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Expectation", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"c", "-", 
      RowBox[{"Mean", "[", "cycleTimeDistribution", "]"}]}], ")"}], "2"], ",", 
   RowBox[{"c", "\[Distributed]", "cycleTimeDistribution"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Expectation", "[", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"c", "-", 
       RowBox[{"Mean", "[", "cycleTimeDistribution", "]"}]}], ")"}], "2"], 
    ",", 
    RowBox[{"c", "\[Distributed]", "cycleTimeDistribution"}]}], "]"}], "//", 
  "N"}]}], "Input",
 CellChangeTimes->{{3.8796857259260263`*^9, 3.8796857510391064`*^9}, {
  3.8796857841839457`*^9, 3.879685785043297*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"6d32be0a-7a03-43a2-99e3-c11ea7be2b48"],

Cell[BoxData[
 TemplateBox[{
   FractionBox["100", "3"], 
   RowBox[{
     SuperscriptBox["\"min\"", "2"]}], "minutes squared", 
   SuperscriptBox["\"Minutes\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8796857515547433`*^9, 3.879685785355833*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"869da450-4e7b-4e83-8650-245a669fc7f0"],

Cell[BoxData[
 TemplateBox[{"33.333333333333336`", 
   RowBox[{
     SuperscriptBox["\"min\"", "2"]}], "minutes squared", 
   SuperscriptBox["\"Minutes\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8796857515547433`*^9, 3.8796857859400396`*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"ffc15fef-6a39-4911-87bd-88b88202df7e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.73", "Section",
 CellChangeTimes->{{3.8796858490717664`*^9, 
  3.879685849712411*^9}},ExpressionUUID->"b76b6ade-518e-4b31-aebe-\
3aa2dd8bcc10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"widthOfBoltsOfFabricDistribution", "=", 
  RowBox[{"QuantityDistribution", "[", 
   RowBox[{
    RowBox[{"NormalDistribution", "[", 
     RowBox[{"950", ",", "10"}], "]"}], ",", "\"\<Millimeters\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8796858536110716`*^9, 3.8796858748886127`*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"8ebcd0fc-3ebe-4252-b6df-e984d3c0a820"],

Cell[BoxData[
 RowBox[{"QuantityDistribution", "[", 
  RowBox[{
   RowBox[{"NormalDistribution", "[", 
    RowBox[{"950", ",", "10"}], "]"}], ",", 
   InterpretationBox[
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"mm\"", "millimeters", 
      "\"Millimeters\""},
     "Quantity"],
    "Millimeters"]}], "]"}]], "Output",
 CellChangeTimes->{3.8796858752948313`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"0ed87b1e-c4f9-44e8-8a99-8f7724f5bfe2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{
    TemplateBox[{"947", "\"mm\"", "millimeters", "\"Millimeters\""},
     "Quantity"], "<=", "p", "<=", 
    TemplateBox[{"958", "\"mm\"", "millimeters", "\"Millimeters\""},
     "Quantity"]}], ",", 
   RowBox[{"p", "\[Distributed]", "widthOfBoltsOfFabricDistribution"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8796858761388445`*^9, 3.8796859055904694`*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"933f7c0c-eae0-4667-b308-0efbe459fd98"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Erf", "[", 
     FractionBox["3", 
      RowBox[{"10", " ", 
       SqrtBox["2"]}]], "]"}], "+", 
    RowBox[{"Erf", "[", 
     FractionBox[
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "5"], "]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.8796859058717537`*^9, 3.8796859090819025`*^9}},
 CellLabel->
  "Out[152]=",ExpressionUUID->"3345e996-7934-4056-98d9-74666b43a2d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NProbability", "[", 
  RowBox[{
   RowBox[{
    TemplateBox[{"947", "\"mm\"", "millimeters", "\"Millimeters\""},
     "Quantity"], "<=", "p", "<=", 
    TemplateBox[{"958", "\"mm\"", "millimeters", "\"Millimeters\""},
     "Quantity"]}], ",", 
   RowBox[{"p", "\[Distributed]", "widthOfBoltsOfFabricDistribution"}], ",", 
   RowBox[{"WorkingPrecision", "->", "400"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796858761388445`*^9, 3.8796859176938705`*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"a4571d6b-af12-4a83-90c0-c66cb3c2855d"],

Cell[BoxData["0.\
406056023605555951730997191349921827963386873517801039456493735321547826030165\
522004980301806851643233292831613774072040925609448685459982549718237136500299\
127398912029276645196046947433727495976835418393950771059831188145397455096990\
472692576896560631027343502300210011460127309869200923807294455134865271824703\
703356031087501074744992469181964402168665373797663657424865997019215444500687\
6323254396940111855441330834052646`400."], "Output",
 CellChangeTimes->{3.8796859182812557`*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"b1cbf7e9-7c82-4bd0-9e8d-dbd4a52640e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InverseCDF", "[", 
  RowBox[{"widthOfBoltsOfFabricDistribution", ",", "0.8531"}], "]"}]], "Input",
 CellChangeTimes->{{3.87968597254318*^9, 3.879685980866049*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"dfc6d8ac-a009-470d-9f1c-d98203ef6cee"],

Cell[BoxData[
 TemplateBox[{
  "960.4982190962642`", "\"mm\"", "millimeters", "\"Millimeters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8796859813660316`*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"757a0547-c139-4ccc-a0fb-a0e09f514b9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"InverseCDF", "[", 
   RowBox[{"widthOfBoltsOfFabricDistribution", ",", "0.8531"}], "]"}], "//", 
  "FullForm"}]], "Input",
 CellChangeTimes->{{3.87968597254318*^9, 3.8796860101193094`*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"63f1d139-1c4c-4b1e-b6c9-24e27732578a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Quantity", "[", 
    RowBox[{"960.4982190962642`", ",", "\"\<Millimeters\>\""}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.879686010494295*^9},
 CellLabel->
  "Out[155]//FullForm=",ExpressionUUID->"c08599c3-cf0c-4fdd-b945-\
29e4eccc53d3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.88", "Section",
 CellChangeTimes->{{3.879686349407991*^9, 
  3.879686350875808*^9}},ExpressionUUID->"f49efc9a-167a-4a08-b39e-\
b090af3c912e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"earthquakeMagnitudes", "=", 
  RowBox[{"ExponentialDistribution", "[", "2.4", "]"}]}]], "Input",
 CellChangeTimes->{{3.8796863538914056`*^9, 3.87968637171691*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"c918dee7-a0ce-480b-a1ce-adadc00b51bc"],

Cell[BoxData[
 RowBox[{"ExponentialDistribution", "[", "2.4`", "]"}]], "Output",
 CellChangeTimes->{3.8796863721700306`*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"17b648b3-2e98-471e-89cd-82ed5b29d42e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"m", ">", "3.0"}], ",", 
   RowBox[{"m", "\[Distributed]", "earthquakeMagnitudes"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796863745449953`*^9, 3.879686383528904*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"337a1c32-aa42-4d1f-ba59-ba497f3ab569"],

Cell[BoxData["0.0007465858083766799`"], "Output",
 CellChangeTimes->{3.879686383841405*^9},
 CellLabel->
  "Out[158]=",ExpressionUUID->"909ee6c3-7b76-4283-a1ca-dd3c4a76e163"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"2.0", "<", "m", "<", "3.0"}], ",", 
   RowBox[{"m", "\[Distributed]", "earthquakeMagnitudes"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796863745449953`*^9, 3.879686394913398*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"05b8fc79-0c77-4c1d-ad3e-ef0ca949c2ef"],

Cell[BoxData["0.007483161240643299`"], "Output",
 CellChangeTimes->{3.8796863952102757`*^9},
 CellLabel->
  "Out[159]=",ExpressionUUID->"1717cf3d-e5e2-4f8b-af9b-b3f5089ea2b7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.90", "Section",
 CellChangeTimes->{{3.879686421029865*^9, 
  3.8796864217173786`*^9}},ExpressionUUID->"1a030593-8310-45ed-a05e-\
88b8661d8482"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"m", ">", "5.0"}], ",", 
   RowBox[{"m", "\[Distributed]", "earthquakeMagnitudes"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8796864270008097`*^9, 3.879686442982917*^9}},
 CellLabel->
  "In[162]:=",ExpressionUUID->"8eaca723-d6ac-43a3-b7cc-f402782e53ca"],

Cell[BoxData["6.14421235332821`*^-6"], "Output",
 CellChangeTimes->{{3.879686443607926*^9, 3.879686454814999*^9}},
 CellLabel->
  "Out[162]=",ExpressionUUID->"23aef543-dd1a-4f97-8863-c5f3af1272ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"c", ">=", "1"}], ",", 
   RowBox[{"c", "\[Distributed]", 
    RowBox[{"BinomialDistribution", "[", 
     RowBox[{"10", ",", 
      RowBox[{"Probability", "[", 
       RowBox[{
        RowBox[{"m", ">", "5.0"}], ",", 
        RowBox[{"m", "\[Distributed]", "earthquakeMagnitudes"}]}], "]"}]}], 
     "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879686460959999*^9, 3.879686485455838*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"202d5e30-85b9-4b95-a513-331fd0bc9816"],

Cell[BoxData["0.00006144042475075828`"], "Output",
 CellChangeTimes->{3.8796864860339413`*^9},
 CellLabel->
  "Out[163]=",ExpressionUUID->"321f387f-9c76-4d81-a237-3777c0095311"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.94", "Section",
 CellChangeTimes->{{3.879686510314407*^9, 
  3.879686510939427*^9}},ExpressionUUID->"19631275-9daa-4bf5-8fce-\
22802a18c78b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"carbonMonoxide", "=", 
  RowBox[{"QuantityDistribution", "[", 
   RowBox[{
    RowBox[{"ExponentialDistribution", "[", "3.6", "]"}], ",", 
    "\"\<PartsPerMillion\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8796865159553995`*^9, 3.8796865596768913`*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"14550ae5-e96f-45a3-986f-93622c02f133"],

Cell[BoxData[
 RowBox[{"QuantityDistribution", "[", 
  RowBox[{
   RowBox[{"ExponentialDistribution", "[", "3.6`", "]"}], ",", 
   InterpretationBox[
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"ppm\"", 
      "parts per million", "\"PartsPerMillion\""},
     "Quantity"],
    "PartsPerMillion"]}], "]"}]], "Output",
 CellChangeTimes->{3.8796865601456285`*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"42584b8d-2275-497c-b40d-03aaecefd0f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"p", ">", 
    TemplateBox[{"9", "\"ppm\"", "parts per million", "\"PartsPerMillion\""},
     "Quantity"]}], ",", 
   RowBox[{"p", "\[Distributed]", "carbonMonoxide"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879686565325119*^9, 3.8796865765986767`*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"b940b1b7-32bd-4f11-96ba-356f34689a62"],

Cell[BoxData["8.489044033871764`*^-15"], "Output",
 CellChangeTimes->{{3.879686576942422*^9, 3.8796865799801273`*^9}},
 CellLabel->
  "Out[167]=",ExpressionUUID->"80a1fc4f-d534-4e58-9128-f6512a00d350"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newCarbonMonoxide", "=", 
  RowBox[{"QuantityDistribution", "[", 
   RowBox[{
    RowBox[{"ExponentialDistribution", "[", "2.5", "]"}], ",", 
    "\"\<PartsPerMillion\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.879686598697061*^9, 3.8796866161644335`*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"c8a8f23f-36ea-4dc3-bfe1-3184669b0810"],

Cell[BoxData[
 RowBox[{"QuantityDistribution", "[", 
  RowBox[{
   RowBox[{"ExponentialDistribution", "[", "2.5`", "]"}], ",", 
   InterpretationBox[
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"ppm\"", 
      "parts per million", "\"PartsPerMillion\""},
     "Quantity"],
    "PartsPerMillion"]}], "]"}]], "Output",
 CellChangeTimes->{3.8796866167737803`*^9},
 CellLabel->
  "Out[168]=",ExpressionUUID->"acfde52e-41a6-43c8-b333-e986e4cb3820"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"n", ">=", 
    TemplateBox[{"9", "\"ppm\"", "parts per million", "\"PartsPerMillion\""},
     "Quantity"]}], ",", 
   RowBox[{"n", "\[Distributed]", "newCarbonMonoxide"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.879686617898781*^9, 3.8796866409391356`*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"112da645-d47e-41f9-b40a-c95fab67e2d8"],

Cell[BoxData["1.6918979226151304`*^-10"], "Output",
 CellChangeTimes->{{3.879686629388208*^9, 3.8796866412047405`*^9}},
 CellLabel->
  "Out[170]=",ExpressionUUID->"7ee04909-47da-44bb-9eae-e0c46cb4a709"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{576., 615.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 18, 2022)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "StandardReport.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"4bfc28ac-e942-45c1-b7bc-71bbbf83b148"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 316, 7, 98, "Title",ExpressionUUID->"62755929-4da7-482b-9330-8516dfaa38a1"],
Cell[899, 31, 213, 3, 69, "Subtitle",ExpressionUUID->"2a3ab592-b967-4df7-9825-f04a61b45b45"],
Cell[1115, 36, 189, 3, 32, "Subsubtitle",ExpressionUUID->"47d5bdab-6696-4d95-a2ec-63dcca8629f0"],
Cell[1307, 41, 195, 3, 45, "Author",ExpressionUUID->"a7fe6df5-960c-4066-adde-d15e9aabfc28"],
Cell[1505, 46, 236, 3, 20, "Department",ExpressionUUID->"527e845f-4dde-46d1-82be-52b41743ff78"],
Cell[1744, 51, 195, 3, 46, "Date",ExpressionUUID->"0c27d0b6-598a-4beb-a4cd-fa0fe4e1d989"],
Cell[CellGroupData[{
Cell[1964, 58, 132, 2, 71, "Section",ExpressionUUID->"333d57a6-c12c-4740-be05-a8a91db541ae"],
Cell[CellGroupData[{
Cell[2121, 64, 138, 2, 35, "Subsection",ExpressionUUID->"444b1c9d-da6c-4c87-b09f-e9dc55219892"],
Cell[CellGroupData[{
Cell[2284, 70, 144, 2, 34, "Subsubsection",ExpressionUUID->"a6f4e6b3-5b1c-4162-a9f7-2e5c874a2626"],
Cell[2431, 74, 200, 5, 59, "Text",ExpressionUUID->"84e22b88-5d33-4a44-88d5-7dbc3377880c"],
Cell[CellGroupData[{
Cell[2656, 83, 232, 7, 54, "Input",ExpressionUUID->"9673bc79-2616-43b9-8645-bb30be97ddaa"],
Cell[2891, 92, 197, 6, 60, "Output",ExpressionUUID->"5a591532-5a7b-4785-b868-3c78f7c31a4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3125, 103, 135, 2, 29, "Item",ExpressionUUID->"e7db3a4c-a54f-4293-b1bc-e8506b7e56b7"],
Cell[3263, 107, 145, 2, 26, "ItemParagraph",ExpressionUUID->"e79a94f6-175a-4fce-b3c0-0505b2ecedb1"],
Cell[CellGroupData[{
Cell[3433, 113, 132, 2, 28, "Subitem",ExpressionUUID->"8e0dc98d-098f-4993-9c94-b6ecc6b4e8ba"],
Cell[3568, 117, 148, 2, 25, "SubitemParagraph",ExpressionUUID->"effcda41-cf86-4213-b207-f521d78ace91"],
Cell[CellGroupData[{
Cell[3741, 123, 135, 2, 26, "Subsubitem",ExpressionUUID->"70dd9247-d28a-4d1f-965e-8abd773aa3c3"],
Cell[3879, 127, 151, 2, 23, "SubsubitemParagraph",ExpressionUUID->"4737a4db-8020-46cd-808c-6c7c054912e8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[4069, 134, 181, 4, 59, "Text",ExpressionUUID->"dc5c8715-abf3-4c98-ad3c-c07d69a8fb20"],
Cell[4253, 140, 274, 8, 40, "DisplayFormula",ExpressionUUID->"7e2f160d-1cb7-4426-a08c-b87ce86c3952"],
Cell[4530, 150, 310, 9, 59, "Text",ExpressionUUID->"953a7a34-efe8-4451-b745-bb5523a632fe"],
Cell[CellGroupData[{
Cell[4865, 163, 143, 2, 29, "ItemNumbered",ExpressionUUID->"483a5a2e-00da-4e68-b80b-be06b2c55d93"],
Cell[5011, 167, 145, 2, 26, "ItemParagraph",ExpressionUUID->"755e4960-5967-4716-ab02-4f29634e23ef"],
Cell[CellGroupData[{
Cell[5181, 173, 149, 2, 28, "SubitemNumbered",ExpressionUUID->"27a88d48-83d5-4e44-99a8-76bb00764339"],
Cell[5333, 177, 148, 2, 25, "SubitemParagraph",ExpressionUUID->"878ffb05-790e-48c8-a6b9-4a5c41db920f"],
Cell[CellGroupData[{
Cell[5506, 183, 143, 2, 26, "SubsubitemNumbered",ExpressionUUID->"3a80d4e5-e95f-4717-87be-c55048a05239"],
Cell[5652, 187, 151, 2, 23, "SubsubitemParagraph",ExpressionUUID->"c49a18c0-8460-4115-ac73-eb0f8433a834"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[5842, 194, 190, 4, 59, "Text",ExpressionUUID->"05c30c9b-4467-4b0e-bb14-3c008bbf4b4e"],
Cell[6035, 200, 282, 8, 40, "DisplayFormulaNumbered",ExpressionUUID->"701b641f-2b4e-4a0c-be63-a82e0fa2cb98"],
Cell[6320, 210, 164, 2, 59, "Text",ExpressionUUID->"cbbf63c7-f609-4bb8-a5d4-e8695e5da8f3"],
Cell[6487, 214, 190, 4, 46, "Code",ExpressionUUID->"38efc9dc-2411-4bfe-aead-d168f187d123"],
Cell[6680, 220, 176, 4, 59, "Text",ExpressionUUID->"00c937a7-45f5-4b4a-a8c1-1a6707b880be"],
Cell[6859, 226, 330, 13, 222, "Program",ExpressionUUID->"1a91bf4e-e5a9-4f0c-b7cc-fff36cd82d6b"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[7250, 246, 153, 3, 57, "Section",ExpressionUUID->"bf996285-a53e-4b33-a65f-eab869ea032c"],
Cell[7406, 251, 113, 2, 29, "ItemNumbered",ExpressionUUID->"e66fd700-0e23-4c7f-9935-3b7725462b93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7556, 258, 150, 3, 69, "Section",ExpressionUUID->"44879938-448a-4854-be7b-5821ad6eef42"],
Cell[CellGroupData[{
Cell[7731, 265, 127, 3, 34, "Subsection",ExpressionUUID->"937f567b-6c97-43fe-98f3-a7dd9c26795c"],
Cell[CellGroupData[{
Cell[7883, 272, 308, 7, 54, "Input",ExpressionUUID->"3eca942a-2ad2-4b12-98bf-75480fd4be56"],
Cell[8194, 281, 295, 8, 60, "Output",ExpressionUUID->"d6d32182-7477-4350-8220-99d9fb6ecf58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8526, 294, 365, 10, 54, "Input",ExpressionUUID->"a991f150-6ea7-4d6e-8bdb-4c89eea69cd9"],
Cell[8894, 306, 374, 12, 74, "Output",ExpressionUUID->"458c2a6b-ae82-46de-9e15-a5d49095bc07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9305, 323, 386, 11, 54, "Input",ExpressionUUID->"260a0e2b-b76e-4a9f-97b3-806c7fee1178"],
Cell[9694, 336, 395, 13, 74, "Output",ExpressionUUID->"8dfc079d-a80b-4625-aa09-7da823998253"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10126, 354, 226, 5, 39, "Input",ExpressionUUID->"d9e46662-4615-482b-a9e4-04318eceaef5"],
Cell[10355, 361, 157, 3, 53, "Output",ExpressionUUID->"0c79b927-0cb4-4ded-936e-0d35f689a040"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10549, 369, 260, 6, 42, "Input",ExpressionUUID->"432213e1-f7f2-4574-9f8e-e2518929856c"],
Cell[10812, 377, 343, 11, 53, "Output",ExpressionUUID->"1e43d915-d14b-42c1-b1da-7b7c3be3e2a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11192, 393, 300, 7, 42, "Input",ExpressionUUID->"8efe71f2-e2b4-4d4a-949f-74977479769a"],
Cell[11495, 402, 375, 12, 53, "Output",ExpressionUUID->"feeb858c-e19d-440b-8357-9875af14621c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11907, 419, 396, 10, 41, "WolframAlphaLong",ExpressionUUID->"0f0e5cc1-01b8-41c6-8a37-3b7061fe2ea5"],
Cell[12306, 431, 439245, 8054, 2624, "Print",ExpressionUUID->"8dad4a49-657b-43c3-8826-2bfb1b52e5b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451588, 8490, 386, 11, 39, "Input",ExpressionUUID->"2913f2b6-87ce-4104-97a3-38bc8fff6d51"],
Cell[451977, 8503, 392, 11, 53, "Output",ExpressionUUID->"ff92713a-6eb5-48cd-a109-058b88d032a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452406, 8519, 473, 14, 39, "Input",ExpressionUUID->"46a5246d-9864-4efb-8f54-07d795df8c26"],
Cell[452882, 8535, 248, 7, 55, "Output",ExpressionUUID->"8232e4c9-ca06-4f52-b68b-e19df78b7e2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[453167, 8547, 558, 14, 41, "WolframAlphaLong",ExpressionUUID->"9046db7b-dd0c-4464-b2c4-9a5cf0488c4e"],
Cell[453728, 8563, 506281, 9356, 3396, "Print",ExpressionUUID->"94d2136b-a7c9-4e74-87fa-bf499549188e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[960046, 17924, 1968, 54, 64, "Input",ExpressionUUID->"9c0c58df-c905-407b-8ca3-403ea288fd2f"],
Cell[962017, 17980, 1552, 43, 78, "Output",ExpressionUUID->"4302af87-9df4-4d85-bc11-5e1d90367014"]
}, Open  ]],
Cell[CellGroupData[{
Cell[963606, 18028, 420, 12, 56, "Input",ExpressionUUID->"a49e769a-e769-402c-b116-c0621ac48e05"],
Cell[964029, 18042, 4874, 103, 263, "Output",ExpressionUUID->"510e76fa-1cbf-4a7e-a48a-1e8516966c2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[968940, 18150, 433, 13, 56, "Input",ExpressionUUID->"0180e673-201e-415b-aa7e-9e3be59c5b22"],
Cell[969376, 18165, 5109, 111, 263, "Output",ExpressionUUID->"b92d6c6b-716e-44b4-a848-224b97328046"]
}, Open  ]],
Cell[CellGroupData[{
Cell[974522, 18281, 1944, 53, 69, "Input",ExpressionUUID->"95bdf486-f88f-47d1-9328-f137be71cf37"],
Cell[976469, 18336, 1586, 44, 82, "Output",ExpressionUUID->"27b85278-2e78-4c0a-b685-f44459682216"]
}, Open  ]],
Cell[CellGroupData[{
Cell[978092, 18385, 473, 13, 56, "Input",ExpressionUUID->"4d1a03e2-a6f1-4835-93a8-4057be4ce521"],
Cell[978568, 18400, 6285, 125, 263, "Output",ExpressionUUID->"168bd351-9165-490e-8ea8-bd944fc43702"]
}, Open  ]],
Cell[CellGroupData[{
Cell[984890, 18530, 256, 6, 39, "Input",ExpressionUUID->"24d30b18-d75f-44e7-af5e-aac09a440f26"],
Cell[985149, 18538, 175, 4, 69, "Output",ExpressionUUID->"3365c152-acba-4e0a-ae20-61310e861afc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[985361, 18547, 207, 4, 39, "Input",ExpressionUUID->"41eee40c-3251-40e8-9d64-fd54423eff09"],
Cell[985571, 18553, 153, 3, 53, "Output",ExpressionUUID->"2bd43658-79d0-4a8d-8daf-5ba2b628a8ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[985761, 18561, 207, 4, 39, "Input",ExpressionUUID->"61f23cbd-cb19-4bdd-951a-1799a987e0c8"],
Cell[985971, 18567, 175, 4, 69, "Output",ExpressionUUID->"0a7fae05-f93c-43cd-9f8e-df52b4146951"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986183, 18576, 454, 12, 55, "Input",ExpressionUUID->"a4daf354-cd96-4328-9490-282011ece714"],
Cell[986640, 18590, 361, 11, 72, "Output",ExpressionUUID->"1319b112-b8ff-4e24-8d0c-31ccf70e42be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[987038, 18606, 551, 14, 55, "Input",ExpressionUUID->"45d3b1c3-f873-4682-a271-f9def3b97d96"],
Cell[987592, 18622, 419, 13, 74, "Output",ExpressionUUID->"6f9f0750-13a1-4d3e-ba02-8481ee8dc57b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[988048, 18640, 525, 14, 55, "Input",ExpressionUUID->"f0a9d39b-d33d-4e7c-becb-5f4d601de96f"],
Cell[988576, 18656, 497, 14, 69, "Output",ExpressionUUID->"9c5ab3c7-9ae3-46ff-8201-6d1d508d3e51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[989110, 18675, 223, 5, 39, "Input",ExpressionUUID->"2b5421f4-a287-4903-96aa-804fbcdcaeca"],
Cell[989336, 18682, 173, 4, 69, "Output",ExpressionUUID->"be41e69c-5895-44ad-ba39-38ac3b8ddc79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[989546, 18691, 205, 4, 39, "Input",ExpressionUUID->"74191111-158f-4a3a-88ac-52df8d2e3d6e"],
Cell[989754, 18697, 361, 11, 72, "Output",ExpressionUUID->"00e87e3f-51f2-4bf9-bc85-7472cf22d395"]
}, Open  ]],
Cell[CellGroupData[{
Cell[990152, 18713, 225, 5, 39, "Input",ExpressionUUID->"9793d620-c384-4d74-b271-735a17171cd1"],
Cell[990380, 18720, 394, 11, 72, "Output",ExpressionUUID->"687e5c45-4778-4c1d-a996-c4bbfe36f026"]
}, Open  ]],
Cell[CellGroupData[{
Cell[990811, 18736, 224, 5, 39, "Input",ExpressionUUID->"bf6b1eea-ad63-4b92-8cd2-4a449c52fecb"],
Cell[991038, 18743, 611, 18, 72, "Output",ExpressionUUID->"213bdee1-7628-4634-9e69-a9c6cb475d51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[991686, 18766, 275, 6, 39, "Input",ExpressionUUID->"bcac4e12-8797-45d2-bf41-914dcbe304d8"],
Cell[991964, 18774, 173, 4, 69, "Output",ExpressionUUID->"9d7bef36-20ae-4f30-beb3-95fbb94c6b61"]
}, Open  ]],
Cell[CellGroupData[{
Cell[992174, 18783, 297, 8, 39, "Input",ExpressionUUID->"33c6066a-1d66-4775-9245-1bf2e4c4f0c9"],
Cell[992474, 18793, 155, 3, 53, "Output",ExpressionUUID->"4cf116e6-0622-4726-a671-73eef4263cf0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[992666, 18801, 323, 9, 39, "Input",ExpressionUUID->"15b8fca2-8432-416c-b751-8379a2059d41"],
Cell[992992, 18812, 175, 4, 69, "Output",ExpressionUUID->"452d5a66-58cb-4877-8f84-e17a54faa56b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[993228, 18823, 151, 3, 69, "Section",ExpressionUUID->"1bf4fe47-7079-4ca5-8414-acd6712ec27a"],
Cell[CellGroupData[{
Cell[993404, 18830, 411, 10, 78, "Input",ExpressionUUID->"a8b8fcb6-26c7-4b4d-abf9-c138e612c6d6"],
Cell[993818, 18842, 488, 14, 58, "Output",ExpressionUUID->"990ec3c1-dd86-43af-af55-8d79ffa282ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[994343, 18861, 536, 13, 48, "Input",ExpressionUUID->"eae1949c-1c0e-401f-bf9d-b3422bfd9167"],
Cell[994882, 18876, 175, 4, 69, "Output",ExpressionUUID->"939cea65-b617-414e-963a-1d8b245fe507"]
}, Open  ]],
Cell[CellGroupData[{
Cell[995094, 18885, 228, 4, 39, "Input",ExpressionUUID->"8f3f0769-dc14-4926-9621-a5ebbc5ec6cc"],
Cell[995325, 18891, 224, 5, 57, "Output",ExpressionUUID->"a2d82f4b-cb09-4e2b-b233-3ca02caea8b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[995586, 18901, 295, 6, 39, "Input",ExpressionUUID->"e8c96aa5-243e-4213-ba42-de5e0efa8bf4"],
Cell[995884, 18909, 222, 5, 57, "Output",ExpressionUUID->"a0a0f635-744a-4e55-85d2-b55dc3f2dd8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[996143, 18919, 346, 8, 59, "Input",ExpressionUUID->"20c96181-b750-4d10-a45b-157cb3517207"],
Cell[996492, 18929, 347, 9, 78, "Output",ExpressionUUID->"53f987b9-3e5d-45ed-9b84-3cf20f2eaf67"],
Cell[996842, 18940, 341, 8, 60, "Output",ExpressionUUID->"ba5f3a01-5bbd-4c99-a035-8a68a6390f14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[997220, 18953, 798, 22, 107, "Input",ExpressionUUID->"6d32be0a-7a03-43a2-99e3-c11ea7be2b48"],
Cell[998021, 18977, 343, 9, 78, "Output",ExpressionUUID->"869da450-4e7b-4e83-8650-245a669fc7f0"],
Cell[998367, 18988, 339, 8, 60, "Output",ExpressionUUID->"ffc15fef-6a39-4911-87bd-88b88202df7e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[998755, 19002, 151, 3, 69, "Section",ExpressionUUID->"b76b6ade-518e-4b31-aebe-3aa2dd8bcc10"],
Cell[CellGroupData[{
Cell[998931, 19009, 402, 9, 78, "Input",ExpressionUUID->"8ebcd0fc-3ebe-4252-b6df-e984d3c0a820"],
Cell[999336, 19020, 473, 13, 55, "Output",ExpressionUUID->"0ed87b1e-c4f9-44e8-8a99-8f7724f5bfe2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[999846, 19038, 513, 12, 66, "Input",ExpressionUUID->"933f7c0c-eae0-4667-b308-0efbe459fd98"],
Cell[1000362, 19052, 472, 15, 76, "Output",ExpressionUUID->"3345e996-7934-4056-98d9-74666b43a2d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1000871, 19072, 563, 12, 66, "Input",ExpressionUUID->"a4571d6b-af12-4a83-90c0-c66cb3c2855d"],
Cell[1001437, 19086, 597, 9, 168, "Output",ExpressionUUID->"b1cbf7e9-7c82-4bd0-9e8d-dbd4a52640e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002071, 19100, 270, 5, 39, "Input",ExpressionUUID->"dfc6d8ac-a009-470d-9f1c-d98203ef6cee"],
Cell[1002344, 19107, 250, 6, 57, "Output",ExpressionUUID->"757a0547-c139-4ccc-a0fb-a0e09f514b9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002631, 19118, 307, 7, 59, "Input",ExpressionUUID->"63f1d139-1c4c-4b1e-b6c9-24e27732578a"],
Cell[1002941, 19127, 382, 12, 53, "Output",ExpressionUUID->"c08599c3-cf0c-4fdd-b945-29e4eccc53d3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1003372, 19145, 149, 3, 69, "Section",ExpressionUUID->"f49efc9a-167a-4a08-b39e-b090af3c912e"],
Cell[CellGroupData[{
Cell[1003546, 19152, 270, 5, 39, "Input",ExpressionUUID->"c918dee7-a0ce-480b-a1ce-adadc00b51bc"],
Cell[1003819, 19159, 207, 4, 53, "Output",ExpressionUUID->"17b648b3-2e98-471e-89cd-82ed5b29d42e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1004063, 19168, 320, 7, 39, "Input",ExpressionUUID->"337a1c32-aa42-4d1f-ba59-ba497f3ab569"],
Cell[1004386, 19177, 174, 3, 53, "Output",ExpressionUUID->"909ee6c3-7b76-4283-a1ca-dd3c4a76e163"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1004597, 19185, 332, 7, 39, "Input",ExpressionUUID->"05b8fc79-0c77-4c1d-ad3e-ef0ca949c2ef"],
Cell[1004932, 19194, 175, 3, 53, "Output",ExpressionUUID->"1717cf3d-e5e2-4f8b-af9b-b3f5089ea2b7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1005156, 19203, 151, 3, 69, "Section",ExpressionUUID->"1a030593-8310-45ed-a05e-88b8661d8482"],
Cell[CellGroupData[{
Cell[1005332, 19210, 320, 7, 39, "Input",ExpressionUUID->"8eaca723-d6ac-43a3-b7cc-f402782e53ca"],
Cell[1005655, 19219, 197, 3, 53, "Output",ExpressionUUID->"23aef543-dd1a-4f97-8863-c5f3af1272ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1005889, 19227, 542, 14, 78, "Input",ExpressionUUID->"202d5e30-85b9-4b95-a513-331fd0bc9816"],
Cell[1006434, 19243, 177, 3, 53, "Output",ExpressionUUID->"321f387f-9c76-4d81-a237-3777c0095311"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1006660, 19252, 149, 3, 69, "Section",ExpressionUUID->"19631275-9daa-4bf5-8fce-22802a18c78b"],
Cell[CellGroupData[{
Cell[1006834, 19259, 367, 8, 78, "Input",ExpressionUUID->"14550ae5-e96f-45a3-986f-93622c02f133"],
Cell[1007204, 19269, 468, 12, 58, "Output",ExpressionUUID->"42584b8d-2275-497c-b40d-03aaecefd0f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1007709, 19286, 404, 9, 46, "Input",ExpressionUUID->"b940b1b7-32bd-4f11-96ba-356f34689a62"],
Cell[1008116, 19297, 201, 3, 53, "Output",ExpressionUUID->"80a1fc4f-d534-4e58-9128-f6512a00d350"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1008354, 19305, 368, 8, 78, "Input",ExpressionUUID->"c8a8f23f-36ea-4dc3-bfe1-3184669b0810"],
Cell[1008725, 19315, 468, 12, 58, "Output",ExpressionUUID->"acfde52e-41a6-43c8-b333-e986e4cb3820"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1009230, 19332, 408, 9, 46, "Input",ExpressionUUID->"112da645-d47e-41f9-b40a-c95fab67e2d8"],
Cell[1009641, 19343, 202, 3, 53, "Output",ExpressionUUID->"7ee04909-47da-44bb-9eae-e0c46cb4a709"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

